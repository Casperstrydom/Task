{
    "sourceFile": "backend/src/routes/taskRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1757313160104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757314088857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const Task = require(\"../models/Task\");\r\n const router = express.Router();\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks:\r\n  *   get:\r\n  *     summary: List tasks\r\n  *     responses:\r\n@@ -16,9 +16,9 @@\n   res.json(tasks);\r\n });\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks:\r\n  *   post:\r\n  *     summary: Create a task\r\n  *     requestBody:\r\n@@ -42,9 +42,9 @@\n   res.status(201).json(task);\r\n });\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks/{id}:\r\n  *   patch:\r\n  *     summary: Update a task\r\n  *     parameters:\r\n@@ -76,9 +76,9 @@\n   res.json(task);\r\n });\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks/{id}:\r\n  *   delete:\r\n  *     summary: Delete a task\r\n  *     parameters:\r\n"
                },
                {
                    "date": 1757314256973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,20 @@\n /**\r\n  * @openapi\r\n  * /tasks:\r\n  *   get:\r\n- *     summary: List tasks\r\n+ *     summary: List all tasks\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     responses:\r\n  *       200:\r\n  *         description: Array of tasks\r\n+ *         content:\r\n+ *           application/json:\r\n+ *             schema:\r\n+ *               type: array\r\n+ *               items:\r\n+ *                 $ref: '#/components/schemas/Task'\r\n  */\r\n router.get(\"/\", async (_req, res) => {\r\n   const tasks = await Task.find().sort({ createdAt: -1 });\r\n   res.json(tasks);\r\n@@ -19,26 +27,36 @@\n /**\r\n  * @openapi\r\n  * /tasks:\r\n  *   post:\r\n- *     summary: Create a task\r\n+ *     summary: Create a new task\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     requestBody:\r\n  *       required: true\r\n  *       content:\r\n  *         application/json:\r\n  *           schema:\r\n  *             type: object\r\n- *             required: [title]\r\n+ *             required:\r\n+ *               - title\r\n  *             properties:\r\n- *               title: { type: string }\r\n+ *               title:\r\n+ *                 type: string\r\n+ *                 example: \"Buy groceries\"\r\n  *     responses:\r\n  *       201:\r\n- *         description: Created\r\n+ *         description: Task created\r\n+ *         content:\r\n+ *           application/json:\r\n+ *             schema:\r\n+ *               $ref: '#/components/schemas/Task'\r\n  */\r\n router.post(\"/\", async (req, res) => {\r\n   const { title } = req.body;\r\n   if (!title || !title.trim())\r\n     return res.status(400).json({ error: \"title is required\" });\r\n+\r\n   const task = await Task.create({ title: title.trim() });\r\n   res.status(201).json(task);\r\n });\r\n \r\n@@ -46,54 +64,100 @@\n  * @openapi\r\n  * /tasks/{id}:\r\n  *   patch:\r\n  *     summary: Update a task\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     parameters:\r\n  *       - in: path\r\n  *         name: id\r\n  *         required: true\r\n+ *         schema:\r\n+ *           type: string\r\n+ *         description: The task ID\r\n  *     requestBody:\r\n  *       required: true\r\n  *       content:\r\n  *         application/json:\r\n  *           schema:\r\n  *             type: object\r\n  *             properties:\r\n- *               title: { type: string }\r\n- *               completed: { type: boolean }\r\n+ *               title:\r\n+ *                 type: string\r\n+ *               completed:\r\n+ *                 type: boolean\r\n  *     responses:\r\n  *       200:\r\n- *         description: Updated\r\n+ *         description: Task updated\r\n+ *         content:\r\n+ *           application/json:\r\n+ *             schema:\r\n+ *               $ref: '#/components/schemas/Task'\r\n+ *       404:\r\n+ *         description: Task not found\r\n  */\r\n router.patch(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const update = {};\r\n+\r\n   if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n   if (typeof req.body.completed === \"boolean\")\r\n     update.completed = req.body.completed;\r\n \r\n   const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n   if (!task) return res.status(404).json({ error: \"not found\" });\r\n+\r\n   res.json(task);\r\n });\r\n \r\n /**\r\n  * @openapi\r\n  * /tasks/{id}:\r\n  *   delete:\r\n  *     summary: Delete a task\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     parameters:\r\n  *       - in: path\r\n  *         name: id\r\n  *         required: true\r\n+ *         schema:\r\n+ *           type: string\r\n+ *         description: The task ID\r\n  *     responses:\r\n  *       204:\r\n- *         description: Deleted\r\n+ *         description: Task deleted\r\n+ *       404:\r\n+ *         description: Task not found\r\n  */\r\n router.delete(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const deleted = await Task.findByIdAndDelete(id);\r\n   if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n+\r\n   res.status(204).send();\r\n });\r\n \r\n module.exports = router;\r\n+\r\n+/**\r\n+ * @openapi\r\n+ * components:\r\n+ *   schemas:\r\n+ *     Task:\r\n+ *       type: object\r\n+ *       required:\r\n+ *         - title\r\n+ *       properties:\r\n+ *         _id:\r\n+ *           type: string\r\n+ *         title:\r\n+ *           type: string\r\n+ *         completed:\r\n+ *           type: boolean\r\n+ *         createdAt:\r\n+ *           type: string\r\n+ *           format: date-time\r\n+ *         updatedAt:\r\n+ *           type: string\r\n+ *           format: date-time\r\n+ */\r\n"
                },
                {
                    "date": 1757315352985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const Task = require(\"../models/Task\");\r\n const router = express.Router();\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks:\r\n  *   get:\r\n  *     summary: List all tasks\r\n  *     tags:\r\n@@ -24,9 +24,9 @@\n   res.json(tasks);\r\n });\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks:\r\n  *   post:\r\n  *     summary: Create a new task\r\n  *     tags:\r\n@@ -60,9 +60,9 @@\n   res.status(201).json(task);\r\n });\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks/{id}:\r\n  *   patch:\r\n  *     summary: Update a task\r\n  *     tags:\r\n@@ -72,9 +72,9 @@\n  *         name: id\r\n  *         required: true\r\n  *         schema:\r\n  *           type: string\r\n- *         description: The task ID\r\n+ *         description: Task ID\r\n  *     requestBody:\r\n  *       required: true\r\n  *       content:\r\n  *         application/json:\r\n@@ -97,21 +97,19 @@\n  */\r\n router.patch(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const update = {};\r\n-\r\n   if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n-  if (typeof req.body.completed === \"boolean\")\r\n-    update.completed = req.body.completed;\r\n+  if (typeof req.body.completed === \"boolean\") update.completed = req.body.completed;\r\n \r\n   const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n   if (!task) return res.status(404).json({ error: \"not found\" });\r\n \r\n   res.json(task);\r\n });\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks/{id}:\r\n  *   delete:\r\n  *     summary: Delete a task\r\n  *     tags:\r\n@@ -121,9 +119,9 @@\n  *         name: id\r\n  *         required: true\r\n  *         schema:\r\n  *           type: string\r\n- *         description: The task ID\r\n+ *         description: Task ID\r\n  *     responses:\r\n  *       204:\r\n  *         description: Task deleted\r\n  *       404:\r\n@@ -132,16 +130,15 @@\n router.delete(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const deleted = await Task.findByIdAndDelete(id);\r\n   if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n-\r\n   res.status(204).send();\r\n });\r\n \r\n module.exports = router;\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * components:\r\n  *   schemas:\r\n  *     Task:\r\n  *       type: object\r\n"
                },
                {
                    "date": 1757666849368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n const express = require(\"express\");\r\n const Task = require(\"../models/Task\");\r\n+const webpush = require(\"web-push\");\r\n+const { subscriptions } = require(\"../subscriptions\"); // shared subscription store\r\n+\r\n const router = express.Router();\r\n \r\n /**\r\n  * @swagger\r\n@@ -8,17 +11,8 @@\n  *   get:\r\n  *     summary: List all tasks\r\n  *     tags:\r\n  *       - Tasks\r\n- *     responses:\r\n- *       200:\r\n- *         description: Array of tasks\r\n- *         content:\r\n- *           application/json:\r\n- *             schema:\r\n- *               type: array\r\n- *               items:\r\n- *                 $ref: '#/components/schemas/Task'\r\n  */\r\n router.get(\"/\", async (_req, res) => {\r\n   const tasks = await Task.find().sort({ createdAt: -1 });\r\n   res.json(tasks);\r\n@@ -30,34 +24,31 @@\n  *   post:\r\n  *     summary: Create a new task\r\n  *     tags:\r\n  *       - Tasks\r\n- *     requestBody:\r\n- *       required: true\r\n- *       content:\r\n- *         application/json:\r\n- *           schema:\r\n- *             type: object\r\n- *             required:\r\n- *               - title\r\n- *             properties:\r\n- *               title:\r\n- *                 type: string\r\n- *                 example: \"Buy groceries\"\r\n- *     responses:\r\n- *       201:\r\n- *         description: Task created\r\n- *         content:\r\n- *           application/json:\r\n- *             schema:\r\n- *               $ref: '#/components/schemas/Task'\r\n  */\r\n router.post(\"/\", async (req, res) => {\r\n   const { title } = req.body;\r\n   if (!title || !title.trim())\r\n     return res.status(400).json({ error: \"title is required\" });\r\n \r\n   const task = await Task.create({ title: title.trim() });\r\n+\r\n+  // ---- 🔔 Send Push Notification ----\r\n+  const payload = JSON.stringify({\r\n+    title: \"New Task Created\",\r\n+    body: `Task: ${task.title}`,\r\n+    icon: \"/icon.png\",\r\n+  });\r\n+\r\n+  const sendPromises = subscriptions.map((sub) =>\r\n+    webpush.sendNotification(sub, payload).catch((err) => {\r\n+      console.error(\"Push error:\", err);\r\n+    })\r\n+  );\r\n+\r\n+  await Promise.all(sendPromises);\r\n+\r\n   res.status(201).json(task);\r\n });\r\n \r\n /**\r\n@@ -66,35 +57,8 @@\n  *   patch:\r\n  *     summary: Update a task\r\n  *     tags:\r\n  *       - Tasks\r\n- *     parameters:\r\n- *       - in: path\r\n- *         name: id\r\n- *         required: true\r\n- *         schema:\r\n- *           type: string\r\n- *         description: Task ID\r\n- *     requestBody:\r\n- *       required: true\r\n- *       content:\r\n- *         application/json:\r\n- *           schema:\r\n- *             type: object\r\n- *             properties:\r\n- *               title:\r\n- *                 type: string\r\n- *               completed:\r\n- *                 type: boolean\r\n- *     responses:\r\n- *       200:\r\n- *         description: Task updated\r\n- *         content:\r\n- *           application/json:\r\n- *             schema:\r\n- *               $ref: '#/components/schemas/Task'\r\n- *       404:\r\n- *         description: Task not found\r\n  */\r\n router.patch(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const update = {};\r\n@@ -114,20 +78,8 @@\n  *   delete:\r\n  *     summary: Delete a task\r\n  *     tags:\r\n  *       - Tasks\r\n- *     parameters:\r\n- *       - in: path\r\n- *         name: id\r\n- *         required: true\r\n- *         schema:\r\n- *           type: string\r\n- *         description: Task ID\r\n- *     responses:\r\n- *       204:\r\n- *         description: Task deleted\r\n- *       404:\r\n- *         description: Task not found\r\n  */\r\n router.delete(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const deleted = await Task.findByIdAndDelete(id);\r\n"
                },
                {
                    "date": 1758179381030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,15 @@\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n router.get(\"/\", async (_req, res) => {\r\n-  const tasks = await Task.find().sort({ createdAt: -1 });\r\n-  res.json(tasks);\r\n+  try {\r\n+    const tasks = await Task.find().sort({ createdAt: -1 });\r\n+    res.json({ success: true, count: tasks.length, tasks });\r\n+  } catch (err) {\r\n+    console.error(\"Fetch tasks error:\", err);\r\n+    res.status(500).json({ success: false, error: \"Failed to fetch tasks\" });\r\n+  }\r\n });\r\n \r\n /**\r\n  * @swagger\r\n@@ -26,30 +31,38 @@\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n router.post(\"/\", async (req, res) => {\r\n-  const { title } = req.body;\r\n-  if (!title || !title.trim())\r\n-    return res.status(400).json({ error: \"title is required\" });\r\n+  try {\r\n+    const { title } = req.body;\r\n+    if (!title || !title.trim()) {\r\n+      return res\r\n+        .status(400)\r\n+        .json({ success: false, error: \"Title is required\" });\r\n+    }\r\n \r\n-  const task = await Task.create({ title: title.trim() });\r\n+    const task = await Task.create({ title: title.trim() });\r\n \r\n-  // ---- 🔔 Send Push Notification ----\r\n-  const payload = JSON.stringify({\r\n-    title: \"New Task Created\",\r\n-    body: `Task: ${task.title}`,\r\n-    icon: \"/icon.png\",\r\n-  });\r\n+    // ---- 🔔 Send Push Notification ----\r\n+    const payload = JSON.stringify({\r\n+      title: \"New Task Created\",\r\n+      body: `Task: ${task.title}`,\r\n+      icon: \"/icon.png\",\r\n+    });\r\n \r\n-  const sendPromises = subscriptions.map((sub) =>\r\n-    webpush.sendNotification(sub, payload).catch((err) => {\r\n-      console.error(\"Push error:\", err);\r\n-    })\r\n-  );\r\n+    await Promise.all(\r\n+      subscriptions.map((sub) =>\r\n+        webpush.sendNotification(sub, payload).catch((err) => {\r\n+          console.error(\"Push error:\", err);\r\n+        })\r\n+      )\r\n+    );\r\n \r\n-  await Promise.all(sendPromises);\r\n-\r\n-  res.status(201).json(task);\r\n+    res.status(201).json({ success: true, task });\r\n+  } catch (err) {\r\n+    console.error(\"Create task error:\", err);\r\n+    res.status(500).json({ success: false, error: \"Failed to create task\" });\r\n+  }\r\n });\r\n \r\n /**\r\n  * @swagger\r\n@@ -59,17 +72,25 @@\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n router.patch(\"/:id\", async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const update = {};\r\n-  if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n-  if (typeof req.body.completed === \"boolean\") update.completed = req.body.completed;\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const update = {};\r\n+    if (typeof req.body.title === \"string\")\r\n+      update.title = req.body.title.trim();\r\n+    if (typeof req.body.completed === \"boolean\")\r\n+      update.completed = req.body.completed;\r\n \r\n-  const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n-  if (!task) return res.status(404).json({ error: \"not found\" });\r\n+    const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n+    if (!task)\r\n+      return res.status(404).json({ success: false, error: \"Task not found\" });\r\n \r\n-  res.json(task);\r\n+    res.json({ success: true, task });\r\n+  } catch (err) {\r\n+    console.error(\"Update task error:\", err);\r\n+    res.status(500).json({ success: false, error: \"Failed to update task\" });\r\n+  }\r\n });\r\n \r\n /**\r\n  * @swagger\r\n@@ -79,34 +100,18 @@\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n router.delete(\"/:id\", async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const deleted = await Task.findByIdAndDelete(id);\r\n-  if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n-  res.status(204).send();\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const deleted = await Task.findByIdAndDelete(id);\r\n+    if (!deleted)\r\n+      return res.status(404).json({ success: false, error: \"Task not found\" });\r\n+\r\n+    res.json({ success: true, message: \"Task deleted\" });\r\n+  } catch (err) {\r\n+    console.error(\"Delete task error:\", err);\r\n+    res.status(500).json({ success: false, error: \"Failed to delete task\" });\r\n+  }\r\n });\r\n \r\n module.exports = router;\r\n-\r\n-/**\r\n- * @swagger\r\n- * components:\r\n- *   schemas:\r\n- *     Task:\r\n- *       type: object\r\n- *       required:\r\n- *         - title\r\n- *       properties:\r\n- *         _id:\r\n- *           type: string\r\n- *         title:\r\n- *           type: string\r\n- *         completed:\r\n- *           type: boolean\r\n- *         createdAt:\r\n- *           type: string\r\n- *           format: date-time\r\n- *         updatedAt:\r\n- *           type: string\r\n- *           format: date-time\r\n- */\r\n"
                },
                {
                    "date": 1758206089462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,15 @@\n       body: `Task: ${task.title}`,\r\n       icon: \"/icon.png\",\r\n     });\r\n \r\n+    // Remove duplicates by endpoint (usually unique per subscription)\r\n+    const uniqueSubs = Array.from(\r\n+      new Map(subscriptions.map((sub) => [sub.endpoint, sub])).values()\r\n+    );\r\n+\r\n     await Promise.all(\r\n-      subscriptions.map((sub) =>\r\n+      uniqueSubs.map((sub) =>\r\n         webpush.sendNotification(sub, payload).catch((err) => {\r\n           console.error(\"Push error:\", err);\r\n         })\r\n       )\r\n"
                },
                {
                    "date": 1758206214393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,20 +48,25 @@\n       body: `Task: ${task.title}`,\r\n       icon: \"/icon.png\",\r\n     });\r\n \r\n-    // Remove duplicates by endpoint (usually unique per subscription)\r\n-    const uniqueSubs = Array.from(\r\n-      new Map(subscriptions.map((sub) => [sub.endpoint, sub])).values()\r\n-    );\r\n+    // Only send once per unique subscription endpoint\r\n+    const uniqueSubsMap = new Map();\r\n+    subscriptions.forEach((sub) => {\r\n+      if (!uniqueSubsMap.has(sub.endpoint)) {\r\n+        uniqueSubsMap.set(sub.endpoint, sub);\r\n+      }\r\n+    });\r\n+    const uniqueSubs = Array.from(uniqueSubsMap.values());\r\n \r\n-    await Promise.all(\r\n-      uniqueSubs.map((sub) =>\r\n-        webpush.sendNotification(sub, payload).catch((err) => {\r\n-          console.error(\"Push error:\", err);\r\n-        })\r\n-      )\r\n-    );\r\n+    // Send notification to all unique subscriptions\r\n+    for (const sub of uniqueSubs) {\r\n+      try {\r\n+        await webpush.sendNotification(sub, payload);\r\n+      } catch (err) {\r\n+        console.error(\"Push error:\", err);\r\n+      }\r\n+    }\r\n \r\n     res.status(201).json({ success: true, task });\r\n   } catch (err) {\r\n     console.error(\"Create task error:\", err);\r\n"
                },
                {
                    "date": 1758262392305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,44 +30,52 @@\n  *     summary: Create a new task\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n+// ✅ Create a task\r\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n-    const { title } = req.body;\r\n+    const { title, dueDate } = req.body;\r\n+\r\n+    // Validation\r\n     if (!title || !title.trim()) {\r\n       return res\r\n         .status(400)\r\n         .json({ success: false, error: \"Title is required\" });\r\n     }\r\n \r\n-    const task = await Task.create({ title: title.trim() });\r\n+    // Save task in MongoDB\r\n+    const task = await Task.create({\r\n+      title: title.trim(),\r\n+      dueDate: dueDate || null,\r\n+      completed: false,\r\n+    });\r\n \r\n     // ---- 🔔 Send Push Notification ----\r\n     const payload = JSON.stringify({\r\n-      title: \"New Task Created\",\r\n+      title: \"✅ New Task Created\",\r\n       body: `Task: ${task.title}`,\r\n       icon: \"/icon.png\",\r\n     });\r\n \r\n-    // Only send once per unique subscription endpoint\r\n+    // Prevent duplicate notifications by unique endpoint\r\n     const uniqueSubsMap = new Map();\r\n     subscriptions.forEach((sub) => {\r\n       if (!uniqueSubsMap.has(sub.endpoint)) {\r\n         uniqueSubsMap.set(sub.endpoint, sub);\r\n       }\r\n     });\r\n     const uniqueSubs = Array.from(uniqueSubsMap.values());\r\n \r\n-    // Send notification to all unique subscriptions\r\n     for (const sub of uniqueSubs) {\r\n       try {\r\n         await webpush.sendNotification(sub, payload);\r\n       } catch (err) {\r\n         console.error(\"Push error:\", err);\r\n       }\r\n     }\r\n \r\n+    // ✅ Respond with saved task\r\n     res.status(201).json({ success: true, task });\r\n   } catch (err) {\r\n     console.error(\"Create task error:\", err);\r\n     res.status(500).json({ success: false, error: \"Failed to create task\" });\r\n"
                },
                {
                    "date": 1758262410548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n  *     summary: Create a new task\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n+\r\n // ✅ Create a task\r\n router.post(\"/\", async (req, res) => {\r\n   try {\r\n     const { title, dueDate } = req.body;\r\n"
                },
                {
                    "date": 1758262488659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,30 @@\n  *     summary: List all tasks\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n+\r\n+// ✅ Get all tasks\r\n router.get(\"/\", async (_req, res) => {\r\n   try {\r\n+    // Get all tasks, sorted by newest first\r\n     const tasks = await Task.find().sort({ createdAt: -1 });\r\n-    res.json({ success: true, count: tasks.length, tasks });\r\n+\r\n+    res.status(200).json({\r\n+      success: true,\r\n+      count: tasks.length,\r\n+      tasks,\r\n+    });\r\n   } catch (err) {\r\n     console.error(\"Fetch tasks error:\", err);\r\n-    res.status(500).json({ success: false, error: \"Failed to fetch tasks\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to fetch tasks\",\r\n+    });\r\n   }\r\n });\r\n \r\n+\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   post:\r\n"
                },
                {
                    "date": 1758262559189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,28 +101,49 @@\n  *     summary: Update a task\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n+\r\n+// ✅ Update a task\r\n router.patch(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n     const update = {};\r\n-    if (typeof req.body.title === \"string\")\r\n+\r\n+    if (typeof req.body.title === \"string\" && req.body.title.trim() !== \"\") {\r\n       update.title = req.body.title.trim();\r\n-    if (typeof req.body.completed === \"boolean\")\r\n+    }\r\n+\r\n+    if (typeof req.body.completed === \"boolean\") {\r\n       update.completed = req.body.completed;\r\n+    }\r\n \r\n-    const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n-    if (!task)\r\n-      return res.status(404).json({ success: false, error: \"Task not found\" });\r\n+    const task = await Task.findByIdAndUpdate(id, update, {\r\n+      new: true,       // return updated doc\r\n+      runValidators: true, // make sure updates respect schema\r\n+    });\r\n \r\n-    res.json({ success: true, task });\r\n+    if (!task) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: \"Task not found\",\r\n+      });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      success: true,\r\n+      task,\r\n+    });\r\n   } catch (err) {\r\n     console.error(\"Update task error:\", err);\r\n-    res.status(500).json({ success: false, error: \"Failed to update task\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to update task\",\r\n+    });\r\n   }\r\n });\r\n \r\n+\r\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   delete:\r\n"
                },
                {
                    "date": 1758262637096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,19 +149,33 @@\n  *     summary: Delete a task\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n+// ✅ Delete a task\r\n router.delete(\"/:id\", async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n-    const deleted = await Task.findByIdAndDelete(id);\r\n-    if (!deleted)\r\n-      return res.status(404).json({ success: false, error: \"Task not found\" });\r\n+    const deletedTask = await Task.findByIdAndDelete(id);\r\n \r\n-    res.json({ success: true, message: \"Task deleted\" });\r\n+    if (!deletedTask) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: \"Task not found\",\r\n+      });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      success: true,\r\n+      message: \"Task deleted successfully\",\r\n+      task: deletedTask, // optional: return the deleted task if frontend needs it\r\n+    });\r\n   } catch (err) {\r\n     console.error(\"Delete task error:\", err);\r\n-    res.status(500).json({ success: false, error: \"Failed to delete task\" });\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to delete task\",\r\n+    });\r\n   }\r\n });\r\n \r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1758265903915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,31 @@\n const express = require(\"express\");\r\n const Task = require(\"../models/Task\");\r\n+const User = require(\"../models/User\");\r\n const webpush = require(\"web-push\");\r\n const { subscriptions } = require(\"../subscriptions\"); // shared subscription store\r\n+const auth = require(\"../middleware/auth\"); // make sure you have auth middleware\r\n \r\n const router = express.Router();\r\n \r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   get:\r\n- *     summary: List all tasks\r\n+ *     summary: List all tasks visible to me and my friends\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n-\r\n-// ✅ Get all tasks\r\n-router.get(\"/\", async (_req, res) => {\r\n+router.get(\"/\", auth, async (req, res) => {\r\n   try {\r\n-    // Get all tasks, sorted by newest first\r\n-    const tasks = await Task.find().sort({ createdAt: -1 });\r\n+    const me = await User.findById(req.userId).populate(\"friends\", \"_id\");\r\n+    const friendIds = me.friends.map(f => f._id);\r\n \r\n+    // Fetch tasks where owner is me or one of my friends\r\n+    const tasks = await Task.find({\r\n+      owner: { $in: [req.userId, ...friendIds] },\r\n+    }).sort({ createdAt: -1 });\r\n+\r\n     res.status(200).json({\r\n       success: true,\r\n       count: tasks.length,\r\n       tasks,\r\n@@ -37,45 +42,38 @@\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   post:\r\n- *     summary: Create a new task\r\n+ *     summary: Create a new task (only visible to me and my friends)\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n-\r\n-// ✅ Create a task\r\n-router.post(\"/\", async (req, res) => {\r\n+router.post(\"/\", auth, async (req, res) => {\r\n   try {\r\n     const { title, dueDate } = req.body;\r\n \r\n-    // Validation\r\n     if (!title || !title.trim()) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ success: false, error: \"Title is required\" });\r\n+      return res.status(400).json({ success: false, error: \"Title is required\" });\r\n     }\r\n \r\n-    // Save task in MongoDB\r\n     const task = await Task.create({\r\n       title: title.trim(),\r\n       dueDate: dueDate || null,\r\n       completed: false,\r\n+      owner: req.userId, // 👈 attach owner\r\n     });\r\n \r\n-    // ---- 🔔 Send Push Notification ----\r\n+    // ---- 🔔 Push Notification (optional) ----\r\n     const payload = JSON.stringify({\r\n       title: \"✅ New Task Created\",\r\n       body: `Task: ${task.title}`,\r\n       icon: \"/icon.png\",\r\n     });\r\n \r\n-    // Prevent duplicate notifications by unique endpoint\r\n+    // Send notifications to unique subscriptions\r\n     const uniqueSubsMap = new Map();\r\n     subscriptions.forEach((sub) => {\r\n-      if (!uniqueSubsMap.has(sub.endpoint)) {\r\n-        uniqueSubsMap.set(sub.endpoint, sub);\r\n-      }\r\n+      if (!uniqueSubsMap.has(sub.endpoint)) uniqueSubsMap.set(sub.endpoint, sub);\r\n     });\r\n     const uniqueSubs = Array.from(uniqueSubsMap.values());\r\n \r\n     for (const sub of uniqueSubs) {\r\n@@ -85,9 +83,8 @@\n         console.error(\"Push error:\", err);\r\n       }\r\n     }\r\n \r\n-    // ✅ Respond with saved task\r\n     res.status(201).json({ success: true, task });\r\n   } catch (err) {\r\n     console.error(\"Create task error:\", err);\r\n     res.status(500).json({ success: false, error: \"Failed to create task\" });\r\n@@ -97,84 +94,68 @@\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   patch:\r\n- *     summary: Update a task\r\n+ *     summary: Update a task (only owner can update)\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n-\r\n-// ✅ Update a task\r\n-router.patch(\"/:id\", async (req, res) => {\r\n+router.patch(\"/:id\", auth, async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n     const update = {};\r\n \r\n     if (typeof req.body.title === \"string\" && req.body.title.trim() !== \"\") {\r\n       update.title = req.body.title.trim();\r\n     }\r\n-\r\n     if (typeof req.body.completed === \"boolean\") {\r\n       update.completed = req.body.completed;\r\n     }\r\n \r\n-    const task = await Task.findByIdAndUpdate(id, update, {\r\n-      new: true, // return updated doc\r\n-      runValidators: true, // make sure updates respect schema\r\n-    });\r\n+    // Only allow update if task owner is current user\r\n+    const task = await Task.findOneAndUpdate(\r\n+      { _id: id, owner: req.userId },\r\n+      update,\r\n+      { new: true, runValidators: true }\r\n+    );\r\n \r\n     if (!task) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        error: \"Task not found\",\r\n-      });\r\n+      return res.status(404).json({ success: false, error: \"Task not found or you don't have permission\" });\r\n     }\r\n \r\n-    res.status(200).json({\r\n-      success: true,\r\n-      task,\r\n-    });\r\n+    res.status(200).json({ success: true, task });\r\n   } catch (err) {\r\n     console.error(\"Update task error:\", err);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to update task\",\r\n-    });\r\n+    res.status(500).json({ success: false, error: \"Failed to update task\" });\r\n   }\r\n });\r\n \r\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   delete:\r\n- *     summary: Delete a task\r\n+ *     summary: Delete a task (only owner can delete)\r\n  *     tags:\r\n  *       - Tasks\r\n  */\r\n-// ✅ Delete a task\r\n-router.delete(\"/:id\", async (req, res) => {\r\n+router.delete(\"/:id\", auth, async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n-    const deletedTask = await Task.findByIdAndDelete(id);\r\n \r\n+    const deletedTask = await Task.findOneAndDelete({ _id: id, owner: req.userId });\r\n+\r\n     if (!deletedTask) {\r\n-      return res.status(404).json({\r\n-        success: false,\r\n-        error: \"Task not found\",\r\n-      });\r\n+      return res.status(404).json({ success: false, error: \"Task not found or you don't have permission\" });\r\n     }\r\n \r\n     res.status(200).json({\r\n       success: true,\r\n       message: \"Task deleted successfully\",\r\n-      task: deletedTask, // optional: return the deleted task if frontend needs it\r\n+      task: deletedTask,\r\n     });\r\n   } catch (err) {\r\n     console.error(\"Delete task error:\", err);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to delete task\",\r\n-    });\r\n+    res.status(500).json({ success: false, error: \"Failed to delete task\" });\r\n   }\r\n });\r\n \r\n module.exports = router;\r\n"
                }
            ],
            "date": 1757313160104,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst Task = require(\"../models/Task\");\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * /tasks:\r\n *   get:\r\n *     summary: List tasks\r\n *     responses:\r\n *       200:\r\n *         description: Array of tasks\r\n */\r\nrouter.get(\"/\", async (_req, res) => {\r\n  const tasks = await Task.find().sort({ createdAt: -1 });\r\n  res.json(tasks);\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /tasks:\r\n *   post:\r\n *     summary: Create a task\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required: [title]\r\n *             properties:\r\n *               title: { type: string }\r\n *     responses:\r\n *       201:\r\n *         description: Created\r\n */\r\nrouter.post(\"/\", async (req, res) => {\r\n  const { title } = req.body;\r\n  if (!title || !title.trim())\r\n    return res.status(400).json({ error: \"title is required\" });\r\n  const task = await Task.create({ title: title.trim() });\r\n  res.status(201).json(task);\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /tasks/{id}:\r\n *   patch:\r\n *     summary: Update a task\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               title: { type: string }\r\n *               completed: { type: boolean }\r\n *     responses:\r\n *       200:\r\n *         description: Updated\r\n */\r\nrouter.patch(\"/:id\", async (req, res) => {\r\n  const { id } = req.params;\r\n  const update = {};\r\n  if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n  if (typeof req.body.completed === \"boolean\")\r\n    update.completed = req.body.completed;\r\n\r\n  const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n  if (!task) return res.status(404).json({ error: \"not found\" });\r\n  res.json(task);\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /tasks/{id}:\r\n *   delete:\r\n *     summary: Delete a task\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *     responses:\r\n *       204:\r\n *         description: Deleted\r\n */\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  const { id } = req.params;\r\n  const deleted = await Task.findByIdAndDelete(id);\r\n  if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n  res.status(204).send();\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}