{
    "sourceFile": "backend/src/routes/taskRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1757313160104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757314088857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const Task = require(\"../models/Task\");\r\n const router = express.Router();\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks:\r\n  *   get:\r\n  *     summary: List tasks\r\n  *     responses:\r\n@@ -16,9 +16,9 @@\n   res.json(tasks);\r\n });\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks:\r\n  *   post:\r\n  *     summary: Create a task\r\n  *     requestBody:\r\n@@ -42,9 +42,9 @@\n   res.status(201).json(task);\r\n });\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks/{id}:\r\n  *   patch:\r\n  *     summary: Update a task\r\n  *     parameters:\r\n@@ -76,9 +76,9 @@\n   res.json(task);\r\n });\r\n \r\n /**\r\n- * @swagger\r\n+ * @openapi\r\n  * /tasks/{id}:\r\n  *   delete:\r\n  *     summary: Delete a task\r\n  *     parameters:\r\n"
                },
                {
                    "date": 1757314256973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,20 @@\n /**\r\n  * @openapi\r\n  * /tasks:\r\n  *   get:\r\n- *     summary: List tasks\r\n+ *     summary: List all tasks\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     responses:\r\n  *       200:\r\n  *         description: Array of tasks\r\n+ *         content:\r\n+ *           application/json:\r\n+ *             schema:\r\n+ *               type: array\r\n+ *               items:\r\n+ *                 $ref: '#/components/schemas/Task'\r\n  */\r\n router.get(\"/\", async (_req, res) => {\r\n   const tasks = await Task.find().sort({ createdAt: -1 });\r\n   res.json(tasks);\r\n@@ -19,26 +27,36 @@\n /**\r\n  * @openapi\r\n  * /tasks:\r\n  *   post:\r\n- *     summary: Create a task\r\n+ *     summary: Create a new task\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     requestBody:\r\n  *       required: true\r\n  *       content:\r\n  *         application/json:\r\n  *           schema:\r\n  *             type: object\r\n- *             required: [title]\r\n+ *             required:\r\n+ *               - title\r\n  *             properties:\r\n- *               title: { type: string }\r\n+ *               title:\r\n+ *                 type: string\r\n+ *                 example: \"Buy groceries\"\r\n  *     responses:\r\n  *       201:\r\n- *         description: Created\r\n+ *         description: Task created\r\n+ *         content:\r\n+ *           application/json:\r\n+ *             schema:\r\n+ *               $ref: '#/components/schemas/Task'\r\n  */\r\n router.post(\"/\", async (req, res) => {\r\n   const { title } = req.body;\r\n   if (!title || !title.trim())\r\n     return res.status(400).json({ error: \"title is required\" });\r\n+\r\n   const task = await Task.create({ title: title.trim() });\r\n   res.status(201).json(task);\r\n });\r\n \r\n@@ -46,54 +64,100 @@\n  * @openapi\r\n  * /tasks/{id}:\r\n  *   patch:\r\n  *     summary: Update a task\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     parameters:\r\n  *       - in: path\r\n  *         name: id\r\n  *         required: true\r\n+ *         schema:\r\n+ *           type: string\r\n+ *         description: The task ID\r\n  *     requestBody:\r\n  *       required: true\r\n  *       content:\r\n  *         application/json:\r\n  *           schema:\r\n  *             type: object\r\n  *             properties:\r\n- *               title: { type: string }\r\n- *               completed: { type: boolean }\r\n+ *               title:\r\n+ *                 type: string\r\n+ *               completed:\r\n+ *                 type: boolean\r\n  *     responses:\r\n  *       200:\r\n- *         description: Updated\r\n+ *         description: Task updated\r\n+ *         content:\r\n+ *           application/json:\r\n+ *             schema:\r\n+ *               $ref: '#/components/schemas/Task'\r\n+ *       404:\r\n+ *         description: Task not found\r\n  */\r\n router.patch(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const update = {};\r\n+\r\n   if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n   if (typeof req.body.completed === \"boolean\")\r\n     update.completed = req.body.completed;\r\n \r\n   const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n   if (!task) return res.status(404).json({ error: \"not found\" });\r\n+\r\n   res.json(task);\r\n });\r\n \r\n /**\r\n  * @openapi\r\n  * /tasks/{id}:\r\n  *   delete:\r\n  *     summary: Delete a task\r\n+ *     tags:\r\n+ *       - Tasks\r\n  *     parameters:\r\n  *       - in: path\r\n  *         name: id\r\n  *         required: true\r\n+ *         schema:\r\n+ *           type: string\r\n+ *         description: The task ID\r\n  *     responses:\r\n  *       204:\r\n- *         description: Deleted\r\n+ *         description: Task deleted\r\n+ *       404:\r\n+ *         description: Task not found\r\n  */\r\n router.delete(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const deleted = await Task.findByIdAndDelete(id);\r\n   if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n+\r\n   res.status(204).send();\r\n });\r\n \r\n module.exports = router;\r\n+\r\n+/**\r\n+ * @openapi\r\n+ * components:\r\n+ *   schemas:\r\n+ *     Task:\r\n+ *       type: object\r\n+ *       required:\r\n+ *         - title\r\n+ *       properties:\r\n+ *         _id:\r\n+ *           type: string\r\n+ *         title:\r\n+ *           type: string\r\n+ *         completed:\r\n+ *           type: boolean\r\n+ *         createdAt:\r\n+ *           type: string\r\n+ *           format: date-time\r\n+ *         updatedAt:\r\n+ *           type: string\r\n+ *           format: date-time\r\n+ */\r\n"
                },
                {
                    "date": 1757315352985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const Task = require(\"../models/Task\");\r\n const router = express.Router();\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks:\r\n  *   get:\r\n  *     summary: List all tasks\r\n  *     tags:\r\n@@ -24,9 +24,9 @@\n   res.json(tasks);\r\n });\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks:\r\n  *   post:\r\n  *     summary: Create a new task\r\n  *     tags:\r\n@@ -60,9 +60,9 @@\n   res.status(201).json(task);\r\n });\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks/{id}:\r\n  *   patch:\r\n  *     summary: Update a task\r\n  *     tags:\r\n@@ -72,9 +72,9 @@\n  *         name: id\r\n  *         required: true\r\n  *         schema:\r\n  *           type: string\r\n- *         description: The task ID\r\n+ *         description: Task ID\r\n  *     requestBody:\r\n  *       required: true\r\n  *       content:\r\n  *         application/json:\r\n@@ -97,21 +97,19 @@\n  */\r\n router.patch(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const update = {};\r\n-\r\n   if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n-  if (typeof req.body.completed === \"boolean\")\r\n-    update.completed = req.body.completed;\r\n+  if (typeof req.body.completed === \"boolean\") update.completed = req.body.completed;\r\n \r\n   const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n   if (!task) return res.status(404).json({ error: \"not found\" });\r\n \r\n   res.json(task);\r\n });\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * /tasks/{id}:\r\n  *   delete:\r\n  *     summary: Delete a task\r\n  *     tags:\r\n@@ -121,9 +119,9 @@\n  *         name: id\r\n  *         required: true\r\n  *         schema:\r\n  *           type: string\r\n- *         description: The task ID\r\n+ *         description: Task ID\r\n  *     responses:\r\n  *       204:\r\n  *         description: Task deleted\r\n  *       404:\r\n@@ -132,16 +130,15 @@\n router.delete(\"/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n   const deleted = await Task.findByIdAndDelete(id);\r\n   if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n-\r\n   res.status(204).send();\r\n });\r\n \r\n module.exports = router;\r\n \r\n /**\r\n- * @openapi\r\n+ * @swagger\r\n  * components:\r\n  *   schemas:\r\n  *     Task:\r\n  *       type: object\r\n"
                }
            ],
            "date": 1757313160104,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst Task = require(\"../models/Task\");\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * /tasks:\r\n *   get:\r\n *     summary: List tasks\r\n *     responses:\r\n *       200:\r\n *         description: Array of tasks\r\n */\r\nrouter.get(\"/\", async (_req, res) => {\r\n  const tasks = await Task.find().sort({ createdAt: -1 });\r\n  res.json(tasks);\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /tasks:\r\n *   post:\r\n *     summary: Create a task\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required: [title]\r\n *             properties:\r\n *               title: { type: string }\r\n *     responses:\r\n *       201:\r\n *         description: Created\r\n */\r\nrouter.post(\"/\", async (req, res) => {\r\n  const { title } = req.body;\r\n  if (!title || !title.trim())\r\n    return res.status(400).json({ error: \"title is required\" });\r\n  const task = await Task.create({ title: title.trim() });\r\n  res.status(201).json(task);\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /tasks/{id}:\r\n *   patch:\r\n *     summary: Update a task\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               title: { type: string }\r\n *               completed: { type: boolean }\r\n *     responses:\r\n *       200:\r\n *         description: Updated\r\n */\r\nrouter.patch(\"/:id\", async (req, res) => {\r\n  const { id } = req.params;\r\n  const update = {};\r\n  if (typeof req.body.title === \"string\") update.title = req.body.title.trim();\r\n  if (typeof req.body.completed === \"boolean\")\r\n    update.completed = req.body.completed;\r\n\r\n  const task = await Task.findByIdAndUpdate(id, update, { new: true });\r\n  if (!task) return res.status(404).json({ error: \"not found\" });\r\n  res.json(task);\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /tasks/{id}:\r\n *   delete:\r\n *     summary: Delete a task\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *     responses:\r\n *       204:\r\n *         description: Deleted\r\n */\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  const { id } = req.params;\r\n  const deleted = await Task.findByIdAndDelete(id);\r\n  if (!deleted) return res.status(404).json({ error: \"not found\" });\r\n  res.status(204).send();\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}