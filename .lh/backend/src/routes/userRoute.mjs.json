{
    "sourceFile": "backend/src/routes/userRoute.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758783034477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758783034477,
            "name": "Commit-0",
            "content": "// backend/src/routes/userRoute.js\r\nimport express from \"express\";\r\nimport User from \"../models/User.mjs\";\r\nimport auth from \"../middleware/auth.mjs\";\r\n\r\nconst router = express.Router();\r\n\r\n// ---------------- USERS ----------------\r\n\r\n// GET /users â†’ fetch all users (except me)\r\nrouter.get(\"/users\", auth, async (req, res) => {\r\n  try {\r\n    const users = await User.find(\r\n      { _id: { $ne: req.userId } },\r\n      \"name email createdAt\"\r\n    ).sort({ createdAt: -1 });\r\n\r\n    res.json(users); // ðŸ‘ˆ return array directly\r\n  } catch (err) {\r\n    console.error(\"Fetch users error:\", err);\r\n    res.status(500).json({ error: \"Failed to fetch users\" });\r\n  }\r\n});\r\n\r\n// GET /user/me â†’ get logged-in user\r\nrouter.get(\"/user/me\", auth, async (req, res) => {\r\n  try {\r\n    const me = await User.findById(req.userId).select(\"name email createdAt\");\r\n    if (!me) return res.status(404).json({ error: \"User not found\" });\r\n    res.json(me);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to fetch user\" });\r\n  }\r\n});\r\n\r\n// PUT /user/privacy â†’ toggle profile privacy\r\nrouter.put(\"/user/privacy\", auth, async (req, res) => {\r\n  try {\r\n    const { isPrivate } = req.body;\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      req.userId,\r\n      { isPrivate },\r\n      { new: true, select: \"name email isPrivate createdAt\" } // return updated doc\r\n    );\r\n\r\n    if (!updatedUser) return res.status(404).json({ error: \"User not found\" });\r\n\r\n    res.json({\r\n      message: `Profile is now ${isPrivate ? \"private\" : \"public\"}`,\r\n      user: updatedUser,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Update privacy error:\", err);\r\n    res.status(500).json({ error: \"Failed to update privacy\" });\r\n  }\r\n});\r\n\r\n// ---------------- FRIEND SYSTEM ----------------\r\n\r\n// GET /friends â†’ list of my friends\r\nrouter.get(\"/friends\", auth, async (req, res) => {\r\n  try {\r\n    const me = await User.findById(req.userId).populate(\r\n      \"friends\",\r\n      \"name email\"\r\n    );\r\n    res.json(me.friends);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to fetch friends\" });\r\n  }\r\n});\r\n\r\n// GET /friend-requests/incoming\r\nrouter.get(\"/friend-requests/incoming\", auth, async (req, res) => {\r\n  try {\r\n    const me = await User.findById(req.userId).populate(\r\n      \"friendRequests\",\r\n      \"name email\"\r\n    );\r\n    res.json(me.friendRequests || []);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to fetch incoming requests\" });\r\n  }\r\n});\r\n\r\n// GET /friend-requests/sent\r\nrouter.get(\"/friend-requests/sent\", auth, async (req, res) => {\r\n  try {\r\n    const me = await User.findById(req.userId).populate(\r\n      \"sentRequests\",\r\n      \"name email\"\r\n    );\r\n    res.json(me.sentRequests || []);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to fetch sent requests\" });\r\n  }\r\n});\r\n\r\n// POST /friend-requests â†’ send request\r\nrouter.post(\"/friend-requests\", auth, async (req, res) => {\r\n  const { toUserId } = req.body;\r\n  try {\r\n    const me = await User.findById(req.userId);\r\n    const recipient = await User.findById(toUserId);\r\n    if (!recipient) return res.status(404).json({ error: \"User not found\" });\r\n\r\n    if (me.friends.includes(recipient._id))\r\n      return res.status(400).json({ error: \"Already friends\" });\r\n\r\n    if (!me.sentRequests.includes(recipient._id)) {\r\n      me.sentRequests.push(recipient._id);\r\n      recipient.friendRequests.push(me._id);\r\n      await me.save();\r\n      await recipient.save();\r\n    }\r\n\r\n    res.json({ message: \"Friend request sent\" });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to send request\" });\r\n  }\r\n});\r\n\r\n// POST /friend-requests/accept\r\nrouter.post(\"/friend-requests/accept\", auth, async (req, res) => {\r\n  const { fromUserId } = req.body;\r\n  try {\r\n    const me = await User.findById(req.userId);\r\n    const sender = await User.findById(fromUserId);\r\n    if (!sender) return res.status(404).json({ error: \"User not found\" });\r\n\r\n    // remove from pending\r\n    me.friendRequests = me.friendRequests.filter(\r\n      (id) => id.toString() !== sender._id.toString()\r\n    );\r\n    sender.sentRequests = sender.sentRequests.filter(\r\n      (id) => id.toString() !== me._id.toString()\r\n    );\r\n\r\n    // add to friends\r\n    if (!me.friends.includes(sender._id)) me.friends.push(sender._id);\r\n    if (!sender.friends.includes(me._id)) sender.friends.push(me._id);\r\n\r\n    await me.save();\r\n    await sender.save();\r\n\r\n    res.json({ message: \"Friend request accepted\", friend: sender });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to accept request\" });\r\n  }\r\n});\r\n\r\n// POST /friend-requests/decline\r\nrouter.post(\"/friend-requests/decline\", auth, async (req, res) => {\r\n  const { fromUserId } = req.body;\r\n  try {\r\n    const me = await User.findById(req.userId);\r\n    const sender = await User.findById(fromUserId);\r\n    if (!sender) return res.status(404).json({ error: \"User not found\" });\r\n\r\n    me.friendRequests = me.friendRequests.filter(\r\n      (id) => id.toString() !== sender._id.toString()\r\n    );\r\n    sender.sentRequests = sender.sentRequests.filter(\r\n      (id) => id.toString() !== me._id.toString()\r\n    );\r\n\r\n    await me.save();\r\n    await sender.save();\r\n\r\n    res.json({ message: \"Friend request declined\" });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to decline request\" });\r\n  }\r\n});\r\n\r\n// DELETE /friends/:id â†’ remove friend\r\nrouter.delete(\"/friends/:id\", auth, async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const me = await User.findById(req.userId);\r\n    const friend = await User.findById(id);\r\n    if (!friend) return res.status(404).json({ error: \"Friend not found\" });\r\n\r\n    me.friends = me.friends.filter(\r\n      (fid) => fid.toString() !== friend._id.toString()\r\n    );\r\n    friend.friends = friend.friends.filter(\r\n      (fid) => fid.toString() !== me._id.toString()\r\n    );\r\n\r\n    await me.save();\r\n    await friend.save();\r\n\r\n    res.json({ message: \"Friend removed\" });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to remove friend\" });\r\n  }\r\n});\r\n\r\n// ---------------- GROUPS (placeholder) ----------------\r\nrouter.get(\"/groups\", (_req, res) => {\r\n  res.json([\r\n    { _id: \"1\", name: \"Developers\" },\r\n    { _id: \"2\", name: \"Designers\" },\r\n  ]);\r\n});\r\n\r\n// âœ… Export as ESM\r\nexport default router;\r\n"
        }
    ]
}