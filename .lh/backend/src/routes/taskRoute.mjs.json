{
    "sourceFile": "backend/src/routes/taskRoute.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1758792160103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758802033714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,18 @@\n     res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n   }\r\n });\r\n \r\n+router.get(\"/private\", async (req, res) => {\r\n+  try {\r\n+    const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n+    res.status(200).json(tasks);\r\n+  } catch (err) {\r\n+    console.error(\"Fetch public tasks error:\", err);\r\n+    res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n+  }\r\n+});\r\n+\r\n // ------------------- USER + FRIEND TASKS -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n"
                },
                {
                    "date": 1758802103150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n const router = express.Router();\r\n \r\n // ------------------- PUBLIC TASKS -------------------\r\n // Fetch all tasks that are NOT private\r\n+// Public tasks (visible to everyone)\r\n router.get(\"/public\", async (req, res) => {\r\n   try {\r\n     const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n     res.status(200).json(tasks);\r\n@@ -19,18 +20,26 @@\n     res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n   }\r\n });\r\n \r\n+// Private tasks (only visible to owner, needs user check)\r\n router.get(\"/private\", async (req, res) => {\r\n   try {\r\n-    const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n+    // Youâ€™ll need req.user from auth middleware to know who is logged in\r\n+    const userId = req.user._id;\r\n+\r\n+    const tasks = await Task.find({ isPrivate: true, owner: userId }).sort({\r\n+      createdAt: -1,\r\n+    });\r\n+\r\n     res.status(200).json(tasks);\r\n   } catch (err) {\r\n-    console.error(\"Fetch public tasks error:\", err);\r\n-    res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n+    console.error(\"Fetch private tasks error:\", err);\r\n+    res.status(500).json({ error: \"Failed to fetch private tasks\" });\r\n   }\r\n });\r\n \r\n+\r\n // ------------------- USER + FRIEND TASKS -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n"
                },
                {
                    "date": 1758803394363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,9 @@\n const router = express.Router();\r\n \r\n // ------------------- PUBLIC TASKS -------------------\r\n // Fetch all tasks that are NOT private\r\n-// Public tasks (visible to everyone)\r\n-router.get(\"/public\", async (req, res) => {\r\n+router.get(\"/public\", async (_req, res) => {\r\n   try {\r\n     const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n     res.status(200).json(tasks);\r\n   } catch (err) {\r\n@@ -20,18 +19,17 @@\n     res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n   }\r\n });\r\n \r\n-// Private tasks (only visible to owner, needs user check)\r\n-router.get(\"/private\", async (req, res) => {\r\n+// ------------------- PRIVATE TASKS -------------------\r\n+// Only visible to the logged-in user\r\n+router.get(\"/private\", auth, async (req, res) => {\r\n   try {\r\n-    // Youâ€™ll need req.user from auth middleware to know who is logged in\r\n-    const userId = req.user._id;\r\n+    const tasks = await Task.find({\r\n+      isPrivate: true,\r\n+      owner: req.userId,\r\n+    }).sort({ createdAt: -1 });\r\n \r\n-    const tasks = await Task.find({ isPrivate: true, owner: userId }).sort({\r\n-      createdAt: -1,\r\n-    });\r\n-\r\n     res.status(200).json(tasks);\r\n   } catch (err) {\r\n     console.error(\"Fetch private tasks error:\", err);\r\n     res.status(500).json({ error: \"Failed to fetch private tasks\" });\r\n@@ -49,9 +47,9 @@\n  */\r\n router.get(\"/\", auth, async (req, res) => {\r\n   try {\r\n     const me = await User.findById(req.userId).populate(\"friends\", \"_id\");\r\n-    const friendIds = me.friends.map((f) => f._id);\r\n+    const friendIds = me?.friends.map((f) => f._id) || [];\r\n \r\n     const tasks = await Task.find({\r\n       owner: { $in: [req.userId, ...friendIds] },\r\n     }).sort({ createdAt: -1 });\r\n@@ -93,9 +91,9 @@\n       title: title.trim(),\r\n       dueDate: dueDate || null,\r\n       completed: false,\r\n       owner: req.userId,\r\n-      isPrivate: isPrivate || false, // set privacy\r\n+      isPrivate: Boolean(isPrivate),\r\n     });\r\n \r\n     // ðŸ”” Push Notification\r\n     const payload = JSON.stringify({\r\n@@ -143,9 +141,9 @@\n     if (typeof req.body.completed === \"boolean\") {\r\n       update.completed = req.body.completed;\r\n     }\r\n     if (typeof req.body.isPrivate === \"boolean\") {\r\n-      update.isPrivate = req.body.isPrivate; // allow privacy update\r\n+      update.isPrivate = req.body.isPrivate;\r\n     }\r\n \r\n     const task = await Task.findOneAndUpdate(\r\n       { _id: id, owner: req.userId },\r\n"
                },
                {
                    "date": 1758812770562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,14 @@\n // backend/src/routes/taskRoute.mjs\r\n import express from \"express\";\r\n import Task from \"../models/Task.mjs\";\r\n import User from \"../models/User.mjs\";\r\n-import webpush from \"../webpush.mjs\"; // centralized ES module config\r\n+import webpush from \"../webpush.mjs\"; // âœ… use centralized ES module config\r\n import { subscriptions } from \"../subscriptions.mjs\"; // shared subscription store\r\n import auth from \"../middleware/auth.mjs\"; // auth middleware\r\n \r\n const router = express.Router();\r\n \r\n-// ------------------- PUBLIC TASKS -------------------\r\n-// Fetch all tasks that are NOT private\r\n-router.get(\"/public\", async (_req, res) => {\r\n-  try {\r\n-    const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n-    res.status(200).json(tasks);\r\n-  } catch (err) {\r\n-    console.error(\"Fetch public tasks error:\", err);\r\n-    res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n-  }\r\n-});\r\n-\r\n-// ------------------- PRIVATE TASKS -------------------\r\n-// Only visible to the logged-in user\r\n-router.get(\"/private\", auth, async (req, res) => {\r\n-  try {\r\n-    const tasks = await Task.find({\r\n-      isPrivate: true,\r\n-      owner: req.userId,\r\n-    }).sort({ createdAt: -1 });\r\n-\r\n-    res.status(200).json(tasks);\r\n-  } catch (err) {\r\n-    console.error(\"Fetch private tasks error:\", err);\r\n-    res.status(500).json({ error: \"Failed to fetch private tasks\" });\r\n-  }\r\n-});\r\n-\r\n-// ------------------- USER + FRIEND TASKS -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   get:\r\n@@ -47,10 +18,11 @@\n  */\r\n router.get(\"/\", auth, async (req, res) => {\r\n   try {\r\n     const me = await User.findById(req.userId).populate(\"friends\", \"_id\");\r\n-    const friendIds = me?.friends.map((f) => f._id) || [];\r\n+    const friendIds = me.friends.map((f) => f._id);\r\n \r\n+    // Fetch tasks where owner is me or one of my friends\r\n     const tasks = await Task.find({\r\n       owner: { $in: [req.userId, ...friendIds] },\r\n     }).sort({ createdAt: -1 });\r\n \r\n@@ -67,9 +39,8 @@\n     });\r\n   }\r\n });\r\n \r\n-// ------------------- CREATE TASK -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   post:\r\n@@ -78,9 +49,9 @@\n  *       - Tasks\r\n  */\r\n router.post(\"/\", auth, async (req, res) => {\r\n   try {\r\n-    const { title, dueDate, isPrivate } = req.body;\r\n+    const { title, dueDate } = req.body;\r\n \r\n     if (!title || !title.trim()) {\r\n       return res\r\n         .status(400)\r\n@@ -91,18 +62,18 @@\n       title: title.trim(),\r\n       dueDate: dueDate || null,\r\n       completed: false,\r\n       owner: req.userId,\r\n-      isPrivate: Boolean(isPrivate),\r\n     });\r\n \r\n-    // ðŸ”” Push Notification\r\n+    // ---- ðŸ”” Push Notification ----\r\n     const payload = JSON.stringify({\r\n       title: \"âœ… New Task Created\",\r\n       body: `Task: ${task.title}`,\r\n       icon: \"/icon.png\",\r\n     });\r\n \r\n+    // Send notifications to unique subscriptions\r\n     const uniqueSubs = [\r\n       ...new Map(subscriptions.map((s) => [s.endpoint, s])).values(),\r\n     ];\r\n \r\n@@ -120,9 +91,8 @@\n     res.status(500).json({ success: false, error: \"Failed to create task\" });\r\n   }\r\n });\r\n \r\n-// ------------------- UPDATE TASK -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   patch:\r\n@@ -140,12 +110,10 @@\n     }\r\n     if (typeof req.body.completed === \"boolean\") {\r\n       update.completed = req.body.completed;\r\n     }\r\n-    if (typeof req.body.isPrivate === \"boolean\") {\r\n-      update.isPrivate = req.body.isPrivate;\r\n-    }\r\n \r\n+    // Only allow update if task owner is current user\r\n     const task = await Task.findOneAndUpdate(\r\n       { _id: id, owner: req.userId },\r\n       update,\r\n       { new: true, runValidators: true }\r\n@@ -164,9 +132,8 @@\n     res.status(500).json({ success: false, error: \"Failed to update task\" });\r\n   }\r\n });\r\n \r\n-// ------------------- DELETE TASK -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   delete:\r\n@@ -200,5 +167,6 @@\n     res.status(500).json({ success: false, error: \"Failed to delete task\" });\r\n   }\r\n });\r\n \r\n+// âœ… Export as ESM\r\n export default router;\r\n"
                },
                {
                    "date": 1758812843353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,14 @@\n // backend/src/routes/taskRoute.mjs\r\n import express from \"express\";\r\n import Task from \"../models/Task.mjs\";\r\n import User from \"../models/User.mjs\";\r\n-import webpush from \"../webpush.mjs\"; // centralized ES module config\r\n+import webpush from \"../webpush.mjs\"; // âœ… use centralized ES module config\r\n import { subscriptions } from \"../subscriptions.mjs\"; // shared subscription store\r\n import auth from \"../middleware/auth.mjs\"; // auth middleware\r\n \r\n const router = express.Router();\r\n \r\n-// ------------------- PUBLIC TASKS -------------------\r\n-// Fetch all tasks that are NOT private\r\n-router.get(\"/public\", async (_req, res) => {\r\n-  try {\r\n-    const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n-    res.status(200).json(tasks);\r\n-  } catch (err) {\r\n-    console.error(\"Fetch public tasks error:\", err);\r\n-    res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n-  }\r\n-});\r\n-\r\n-// ------------------- PRIVATE TASKS -------------------\r\n-// Only visible to the logged-in user\r\n-router.get(\"/private\", auth, async (req, res) => {\r\n-  try {\r\n-    const tasks = await Task.find({\r\n-      isPrivate: true,\r\n-      owner: req.userId,\r\n-    }).sort({ createdAt: -1 });\r\n-\r\n-    res.status(200).json(tasks);\r\n-  } catch (err) {\r\n-    console.error(\"Fetch private tasks error:\", err);\r\n-    res.status(500).json({ error: \"Failed to fetch private tasks\" });\r\n-  }\r\n-});\r\n-\r\n-// ------------------- USER + FRIEND TASKS -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   get:\r\n@@ -47,10 +18,11 @@\n  */\r\n router.get(\"/\", auth, async (req, res) => {\r\n   try {\r\n     const me = await User.findById(req.userId).populate(\"friends\", \"_id\");\r\n-    const friendIds = me?.friends.map((f) => f._id) || [];\r\n+    const friendIds = me.friends.map((f) => f._id);\r\n \r\n+    // Fetch tasks where owner is me or one of my friends\r\n     const tasks = await Task.find({\r\n       owner: { $in: [req.userId, ...friendIds] },\r\n     }).sort({ createdAt: -1 });\r\n \r\n@@ -67,9 +39,8 @@\n     });\r\n   }\r\n });\r\n \r\n-// ------------------- CREATE TASK -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks:\r\n  *   post:\r\n@@ -78,9 +49,9 @@\n  *       - Tasks\r\n  */\r\n router.post(\"/\", auth, async (req, res) => {\r\n   try {\r\n-    const { title, dueDate, isPrivate } = req.body;\r\n+    const { title, dueDate } = req.body;\r\n \r\n     if (!title || !title.trim()) {\r\n       return res\r\n         .status(400)\r\n@@ -91,18 +62,18 @@\n       title: title.trim(),\r\n       dueDate: dueDate || null,\r\n       completed: false,\r\n       owner: req.userId,\r\n-      isPrivate: Boolean(isPrivate),\r\n     });\r\n \r\n-    // ðŸ”” Push Notification\r\n+    // ---- ðŸ”” Push Notification ----\r\n     const payload = JSON.stringify({\r\n       title: \"âœ… New Task Created\",\r\n       body: `Task: ${task.title}`,\r\n       icon: \"/icon.png\",\r\n     });\r\n \r\n+    // Send notifications to unique subscriptions\r\n     const uniqueSubs = [\r\n       ...new Map(subscriptions.map((s) => [s.endpoint, s])).values(),\r\n     ];\r\n \r\n@@ -120,9 +91,8 @@\n     res.status(500).json({ success: false, error: \"Failed to create task\" });\r\n   }\r\n });\r\n \r\n-// ------------------- UPDATE TASK -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   patch:\r\n@@ -140,12 +110,10 @@\n     }\r\n     if (typeof req.body.completed === \"boolean\") {\r\n       update.completed = req.body.completed;\r\n     }\r\n-    if (typeof req.body.isPrivate === \"boolean\") {\r\n-      update.isPrivate = req.body.isPrivate;\r\n-    }\r\n \r\n+    // Only allow update if task owner is current user\r\n     const task = await Task.findOneAndUpdate(\r\n       { _id: id, owner: req.userId },\r\n       update,\r\n       { new: true, runValidators: true }\r\n@@ -164,9 +132,8 @@\n     res.status(500).json({ success: false, error: \"Failed to update task\" });\r\n   }\r\n });\r\n \r\n-// ------------------- DELETE TASK -------------------\r\n /**\r\n  * @swagger\r\n  * /tasks/{id}:\r\n  *   delete:\r\n@@ -200,5 +167,6 @@\n     res.status(500).json({ success: false, error: \"Failed to delete task\" });\r\n   }\r\n });\r\n \r\n+// âœ… Export as ESM\r\n export default router;\r\n"
                }
            ],
            "date": 1758792160102,
            "name": "Commit-0",
            "content": "// backend/src/routes/taskRoute.mjs\r\nimport express from \"express\";\r\nimport Task from \"../models/Task.mjs\";\r\nimport User from \"../models/User.mjs\";\r\nimport webpush from \"../webpush.mjs\"; // centralized ES module config\r\nimport { subscriptions } from \"../subscriptions.mjs\"; // shared subscription store\r\nimport auth from \"../middleware/auth.mjs\"; // auth middleware\r\n\r\nconst router = express.Router();\r\n\r\n// ------------------- PUBLIC TASKS -------------------\r\n// Fetch all tasks that are NOT private\r\nrouter.get(\"/public\", async (req, res) => {\r\n  try {\r\n    const tasks = await Task.find({ isPrivate: false }).sort({ createdAt: -1 });\r\n    res.status(200).json(tasks);\r\n  } catch (err) {\r\n    console.error(\"Fetch public tasks error:\", err);\r\n    res.status(500).json({ error: \"Failed to fetch public tasks\" });\r\n  }\r\n});\r\n\r\n// ------------------- USER + FRIEND TASKS -------------------\r\n/**\r\n * @swagger\r\n * /tasks:\r\n *   get:\r\n *     summary: List all tasks visible to me and my friends\r\n *     tags:\r\n *       - Tasks\r\n */\r\nrouter.get(\"/\", auth, async (req, res) => {\r\n  try {\r\n    const me = await User.findById(req.userId).populate(\"friends\", \"_id\");\r\n    const friendIds = me.friends.map((f) => f._id);\r\n\r\n    const tasks = await Task.find({\r\n      owner: { $in: [req.userId, ...friendIds] },\r\n    }).sort({ createdAt: -1 });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      count: tasks.length,\r\n      tasks,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Fetch tasks error:\", err);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: \"Failed to fetch tasks\",\r\n    });\r\n  }\r\n});\r\n\r\n// ------------------- CREATE TASK -------------------\r\n/**\r\n * @swagger\r\n * /tasks:\r\n *   post:\r\n *     summary: Create a new task (only visible to me and my friends)\r\n *     tags:\r\n *       - Tasks\r\n */\r\nrouter.post(\"/\", auth, async (req, res) => {\r\n  try {\r\n    const { title, dueDate, isPrivate } = req.body;\r\n\r\n    if (!title || !title.trim()) {\r\n      return res\r\n        .status(400)\r\n        .json({ success: false, error: \"Title is required\" });\r\n    }\r\n\r\n    const task = await Task.create({\r\n      title: title.trim(),\r\n      dueDate: dueDate || null,\r\n      completed: false,\r\n      owner: req.userId,\r\n      isPrivate: isPrivate || false, // set privacy\r\n    });\r\n\r\n    // ðŸ”” Push Notification\r\n    const payload = JSON.stringify({\r\n      title: \"âœ… New Task Created\",\r\n      body: `Task: ${task.title}`,\r\n      icon: \"/icon.png\",\r\n    });\r\n\r\n    const uniqueSubs = [\r\n      ...new Map(subscriptions.map((s) => [s.endpoint, s])).values(),\r\n    ];\r\n\r\n    for (const sub of uniqueSubs) {\r\n      try {\r\n        await webpush.sendNotification(sub, payload);\r\n      } catch (err) {\r\n        console.error(\"Push error:\", err);\r\n      }\r\n    }\r\n\r\n    res.status(201).json({ success: true, task });\r\n  } catch (err) {\r\n    console.error(\"Create task error:\", err);\r\n    res.status(500).json({ success: false, error: \"Failed to create task\" });\r\n  }\r\n});\r\n\r\n// ------------------- UPDATE TASK -------------------\r\n/**\r\n * @swagger\r\n * /tasks/{id}:\r\n *   patch:\r\n *     summary: Update a task (only owner can update)\r\n *     tags:\r\n *       - Tasks\r\n */\r\nrouter.patch(\"/:id\", auth, async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const update = {};\r\n\r\n    if (typeof req.body.title === \"string\" && req.body.title.trim() !== \"\") {\r\n      update.title = req.body.title.trim();\r\n    }\r\n    if (typeof req.body.completed === \"boolean\") {\r\n      update.completed = req.body.completed;\r\n    }\r\n    if (typeof req.body.isPrivate === \"boolean\") {\r\n      update.isPrivate = req.body.isPrivate; // allow privacy update\r\n    }\r\n\r\n    const task = await Task.findOneAndUpdate(\r\n      { _id: id, owner: req.userId },\r\n      update,\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    if (!task) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: \"Task not found or you don't have permission\",\r\n      });\r\n    }\r\n\r\n    res.status(200).json({ success: true, task });\r\n  } catch (err) {\r\n    console.error(\"Update task error:\", err);\r\n    res.status(500).json({ success: false, error: \"Failed to update task\" });\r\n  }\r\n});\r\n\r\n// ------------------- DELETE TASK -------------------\r\n/**\r\n * @swagger\r\n * /tasks/{id}:\r\n *   delete:\r\n *     summary: Delete a task (only owner can delete)\r\n *     tags:\r\n *       - Tasks\r\n */\r\nrouter.delete(\"/:id\", auth, async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const deletedTask = await Task.findOneAndDelete({\r\n      _id: id,\r\n      owner: req.userId,\r\n    });\r\n\r\n    if (!deletedTask) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: \"Task not found or you don't have permission\",\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Task deleted successfully\",\r\n      task: deletedTask,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Delete task error:\", err);\r\n    res.status(500).json({ success: false, error: \"Failed to delete task\" });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"
        }
    ]
}