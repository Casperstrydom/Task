{
    "sourceFile": "backend/src/routes/userRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1757921895090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757922121564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,124 +1,57 @@\n const express = require(\"express\");\r\n const User = require(\"../models/User\");\r\n-const Friend = require(\"../models/Friend\");\r\n-const Group = require(\"../models/Group\");\r\n \r\n const router = express.Router();\r\n \r\n-/**\r\n- * GET /users\r\n- * Get all users\r\n- */\r\n-router.get(\"/\", async (_req, res) => {\r\n+// --- Get all users ---\r\n+router.get(\"/users\", async (_req, res) => {\r\n   try {\r\n-    const users = await User.find().select(\"-password\"); // don't return password\r\n+    const users = await User.find({}, \"name email\"); // only return name and email\r\n     res.json(users);\r\n   } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n+    console.error(err);\r\n+    res.status(500).json({ error: \"Failed to fetch users\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * GET /user/me\r\n- * Get current user (placeholder)\r\n- * For now, just return the first user for testing\r\n- */\r\n-router.get(\"/me\", async (_req, res) => {\r\n+// --- Get current user ---\r\n+router.get(\"/user/me\", async (_req, res) => {\r\n   try {\r\n-    const user = await User.findOne().select(\"-password\");\r\n-    if (!user) return res.status(404).json({ error: \"No users found\" });\r\n-    res.json(user);\r\n+    // TODO: replace with actual auth session logic\r\n+    const user = await User.findOne(); // just return first user for now\r\n+    if (!user) return res.status(404).json({ error: \"User not found\" });\r\n+    res.json({ name: user.name, email: user.email, joined: user.createdAt });\r\n   } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n+    console.error(err);\r\n+    res.status(500).json({ error: \"Failed to fetch user\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * GET /friends\r\n- * Get all friends for current user (placeholder: first user)\r\n- */\r\n+// --- Friends list ---\r\n router.get(\"/friends\", async (_req, res) => {\r\n   try {\r\n-    const user = await User.findOne();\r\n-    const friends = await Friend.find({ userId: user._id }).populate(\r\n-      \"friendId\",\r\n-      \"name email\"\r\n-    );\r\n-    res.json(\r\n-      friends.map((f) => ({\r\n-        _id: f._id,\r\n-        name: f.friendId.name,\r\n-        email: f.friendId.email,\r\n-      }))\r\n-    );\r\n+    // temporary: return first 3 users as \"friends\"\r\n+    const friends = await User.find().limit(3);\r\n+    res.json(friends);\r\n   } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n+    console.error(err);\r\n+    res.status(500).json({ error: \"Failed to fetch friends\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * POST /friends\r\n- * Add friend\r\n- */\r\n-router.post(\"/friends\", async (req, res) => {\r\n-  const { friendId } = req.body;\r\n-  try {\r\n-    const user = await User.findOne(); // placeholder\r\n-    const existing = await Friend.findOne({ userId: user._id, friendId });\r\n-    if (existing) return res.status(400).json({ error: \"Already friends\" });\r\n-\r\n-    const friend = await Friend.create({ userId: user._id, friendId });\r\n-    const populated = await friend.populate(\"friendId\", \"name email\");\r\n-    res\r\n-      .status(201)\r\n-      .json({\r\n-        _id: populated._id,\r\n-        name: populated.friendId.name,\r\n-        email: populated.friendId.email,\r\n-      });\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * DELETE /friends/:id\r\n- * Remove friend\r\n- */\r\n-router.delete(\"/friends/:id\", async (req, res) => {\r\n-  try {\r\n-    await Friend.findByIdAndDelete(req.params.id);\r\n-    res.status(204).send();\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * GET /groups\r\n- * List all groups\r\n- */\r\n+// --- Groups list ---\r\n router.get(\"/groups\", async (_req, res) => {\r\n   try {\r\n-    const groups = await Group.find().populate(\"members\", \"name email\");\r\n+    // temporary: return mock groups\r\n+    const groups = [\r\n+      { _id: \"1\", name: \"Developers\" },\r\n+      { _id: \"2\", name: \"Designers\" },\r\n+    ];\r\n     res.json(groups);\r\n   } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n+    console.error(err);\r\n+    res.status(500).json({ error: \"Failed to fetch groups\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * POST /groups\r\n- * Create group\r\n- */\r\n-router.post(\"/groups\", async (req, res) => {\r\n-  try {\r\n-    const { name } = req.body;\r\n-    const group = await Group.create({ name, members: [] });\r\n-    res.status(201).json(group);\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: \"Server error\" });\r\n-  }\r\n-});\r\n-\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1757922210166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,56 +2,48 @@\n const User = require(\"../models/User\");\r\n \r\n const router = express.Router();\r\n \r\n-// --- Get all users ---\r\n+// GET /users → fetch all users\r\n router.get(\"/users\", async (_req, res) => {\r\n   try {\r\n-    const users = await User.find({}, \"name email\"); // only return name and email\r\n+    const users = await User.find({}, \"name email\"); // return only name and email\r\n     res.json(users);\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ error: \"Failed to fetch users\" });\r\n   }\r\n });\r\n \r\n-// --- Get current user ---\r\n+// GET /user/me → fetch current user (temporary placeholder)\r\n router.get(\"/user/me\", async (_req, res) => {\r\n   try {\r\n-    // TODO: replace with actual auth session logic\r\n-    const user = await User.findOne(); // just return first user for now\r\n+    const user = await User.findOne(); // for now, just return first user\r\n     if (!user) return res.status(404).json({ error: \"User not found\" });\r\n     res.json({ name: user.name, email: user.email, joined: user.createdAt });\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ error: \"Failed to fetch user\" });\r\n   }\r\n });\r\n \r\n-// --- Friends list ---\r\n+// GET /friends → return mock friends\r\n router.get(\"/friends\", async (_req, res) => {\r\n   try {\r\n-    // temporary: return first 3 users as \"friends\"\r\n-    const friends = await User.find().limit(3);\r\n+    const friends = await User.find().limit(3); // first 3 users as \"friends\"\r\n     res.json(friends);\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ error: \"Failed to fetch friends\" });\r\n   }\r\n });\r\n \r\n-// --- Groups list ---\r\n-router.get(\"/groups\", async (_req, res) => {\r\n-  try {\r\n-    // temporary: return mock groups\r\n-    const groups = [\r\n-      { _id: \"1\", name: \"Developers\" },\r\n-      { _id: \"2\", name: \"Designers\" },\r\n-    ];\r\n-    res.json(groups);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ error: \"Failed to fetch groups\" });\r\n-  }\r\n+// GET /groups → return mock groups\r\n+router.get(\"/groups\", (_req, res) => {\r\n+  const groups = [\r\n+    { _id: \"1\", name: \"Developers\" },\r\n+    { _id: \"2\", name: \"Designers\" },\r\n+  ];\r\n+  res.json(groups);\r\n });\r\n \r\n module.exports = router;\r\n"
                }
            ],
            "date": 1757921895090,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst User = require(\"../models/User\");\r\nconst Friend = require(\"../models/Friend\");\r\nconst Group = require(\"../models/Group\");\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * GET /users\r\n * Get all users\r\n */\r\nrouter.get(\"/\", async (_req, res) => {\r\n  try {\r\n    const users = await User.find().select(\"-password\"); // don't return password\r\n    res.json(users);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /user/me\r\n * Get current user (placeholder)\r\n * For now, just return the first user for testing\r\n */\r\nrouter.get(\"/me\", async (_req, res) => {\r\n  try {\r\n    const user = await User.findOne().select(\"-password\");\r\n    if (!user) return res.status(404).json({ error: \"No users found\" });\r\n    res.json(user);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /friends\r\n * Get all friends for current user (placeholder: first user)\r\n */\r\nrouter.get(\"/friends\", async (_req, res) => {\r\n  try {\r\n    const user = await User.findOne();\r\n    const friends = await Friend.find({ userId: user._id }).populate(\"friendId\", \"name email\");\r\n    res.json(friends.map(f => ({ _id: f._id, name: f.friendId.name, email: f.friendId.email })));\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * POST /friends\r\n * Add friend\r\n */\r\nrouter.post(\"/friends\", async (req, res) => {\r\n  const { friendId } = req.body;\r\n  try {\r\n    const user = await User.findOne(); // placeholder\r\n    const existing = await Friend.findOne({ userId: user._id, friendId });\r\n    if (existing) return res.status(400).json({ error: \"Already friends\" });\r\n\r\n    const friend = await Friend.create({ userId: user._id, friendId });\r\n    const populated = await friend.populate(\"friendId\", \"name email\");\r\n    res.status(201).json({ _id: populated._id, name: populated.friendId.name, email: populated.friendId.email });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * DELETE /friends/:id\r\n * Remove friend\r\n */\r\nrouter.delete(\"/friends/:id\", async (req, res) => {\r\n  try {\r\n    await Friend.findByIdAndDelete(req.params.id);\r\n    res.status(204).send();\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * GET /groups\r\n * List all groups\r\n */\r\nrouter.get(\"/groups\", async (_req, res) => {\r\n  try {\r\n    const groups = await Group.find().populate(\"members\", \"name email\");\r\n    res.json(groups);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * POST /groups\r\n * Create group\r\n */\r\nrouter.post(\"/groups\", async (req, res) => {\r\n  try {\r\n    const { name } = req.body;\r\n    const group = await Group.create({ name, members: [] });\r\n    res.status(201).json(group);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}