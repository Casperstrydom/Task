{
    "sourceFile": "backend/src/index.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758803283541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758803283541,
            "name": "Commit-0",
            "content": "// backend/src/index.js\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport swaggerJsdoc from \"swagger-jsdoc\";\r\nimport swaggerUi from \"swagger-ui-express\";\r\nimport webpush from \"web-push\";\r\nimport path from \"path\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nimport { subscriptions } from \"./subscriptions.mjs\"; // ESM style\r\n\r\nimport taskRoutes from \"./routes/taskRoute.mjs\";\r\nimport authRoutes from \"./routes/authRoute.mjs\";\r\nimport userRoutes from \"./routes/userRoute.mjs\";\r\n\r\nconst app = express();\r\n\r\n// ----------------- Middleware -----------------\r\napp.use(express.json()); // Parse JSON bodies\r\n\r\n// ----------------- Allowed Origins -----------------\r\nconst allowedOrigins = [\"http://localhost:5173\"]; // Add your frontend URL if needed\r\n\r\napp.use((req, res, next) => {\r\n  const origin = req.headers.origin;\r\n  console.log(\"üåç Incoming request:\", req.method, req.url, \"Origin:\", origin);\r\n\r\n  if (!origin || allowedOrigins.includes(origin)) {\r\n    res.setHeader(\r\n      \"Access-Control-Allow-Origin\",\r\n      origin || /.*/ // fallback for no origin (like Postman)\r\n    );\r\n    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n    res.setHeader(\r\n      \"Access-Control-Allow-Methods\",\r\n      \"GET,POST,PUT,PATCH,DELETE,OPTIONS\"\r\n    );\r\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type,Authorization\");\r\n    console.log(\"‚úÖ CORS headers set\");\r\n  } else {\r\n    console.warn(\"‚ùå Blocked by CORS:\", origin);\r\n  }\r\n\r\n  if (req.method === \"OPTIONS\") return res.sendStatus(200);\r\n\r\n  next();\r\n});\r\n\r\n// ----------------- Swagger -----------------\r\nconst swaggerOptions = {\r\n  definition: {\r\n    openapi: \"3.0.0\",\r\n    info: { title: \"Task API\", version: \"1.0.0\" },\r\n    servers: [\r\n      {\r\n        url:\r\n          process.env.AWS_APP_RUNNER_URL ||\r\n          process.env.RENDER_EXTERNAL_URL ||\r\n          `http://localhost:${process.env.PORT || 5000}`,\r\n      },\r\n    ],\r\n  },\r\n  apis: [\"./routes/*.mjs\"],\r\n};\r\n\r\napp.use(\r\n  \"/api-docs\",\r\n  swaggerUi.serve,\r\n  swaggerUi.setup(swaggerJsdoc(swaggerOptions))\r\n);\r\n\r\n// ----------------- VAPID Public Key -----------------\r\napp.get(\"/vapidPublicKey\", (_req, res) => {\r\n  console.log(\"üîë VAPID public key requested\");\r\n  res.json({ publicKey: process.env.VAPID_PUBLIC_KEY });\r\n});\r\n\r\n// ----------------- Push Notifications -----------------\r\nwebpush.setVapidDetails(\r\n  \"mailto:your@email.com\",\r\n  process.env.VAPID_PUBLIC_KEY,\r\n  process.env.VAPID_PRIVATE_KEY\r\n);\r\n\r\napp.post(\"/subscribe\", (req, res) => {\r\n  console.log(\"üì® New subscription request:\", req.body);\r\n  subscriptions.push(req.body);\r\n  res.status(201).json({ message: \"Subscribed successfully\" });\r\n});\r\n\r\napp.post(\"/sendNotification\", async (req, res) => {\r\n  console.log(\"üì£ Sending push notification:\", req.body);\r\n  const { title, body } = req.body;\r\n  const payload = JSON.stringify({\r\n    title: title || \"Task Update\",\r\n    body: body || \"You have a new task or group update!\",\r\n    icon: \"/icon.png\",\r\n  });\r\n\r\n  await Promise.all(\r\n    subscriptions.map((sub) =>\r\n      webpush.sendNotification(sub, payload).catch((err) => {\r\n        console.error(\"‚ùå Push failed for subscription:\", sub, err);\r\n      })\r\n    )\r\n  );\r\n\r\n  res.json({ message: \"Notifications sent\" });\r\n});\r\n\r\n// ----------------- API Routes -----------------\r\napp.use(\"/tasks\", taskRoutes);\r\napp.use(\"/auth\", authRoutes);\r\napp.use(\"/\", userRoutes);\r\n\r\n// ----------------- Serve React Frontend -----------------\r\nconst __dirname = path.resolve();\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\n\r\n// Catch-all for React SPA routing\r\napp.get(/.*/, (_req, res) => {\r\n  res.sendFile(path.join(__dirname, \"public\", \"index.html\"));\r\n});\r\n\r\n// ----------------- Health Check -----------------\r\napp.get(\"/health\", (_req, res) => res.json({ status: \"ok\" }));\r\n\r\n// ----------------- MongoDB Connection & Server Start -----------------\r\nmongoose\r\n  .connect(process.env.MONGO_URI)\r\n  .then(() => {\r\n    console.log(\"‚úÖ MongoDB connected\");\r\n    app.listen(process.env.PORT || 5000, () => {\r\n      console.log(\r\n        `‚úÖ Server running on http://localhost:${process.env.PORT || 5000}`\r\n      );\r\n      console.log(\r\n        `üìò Swagger docs at http://localhost:${\r\n          process.env.PORT || 5000\r\n        }/api-docs`\r\n      );\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"‚ùå MongoDB connection error:\", err);\r\n    process.exit(1);\r\n  });\r\n"
        }
    ]
}