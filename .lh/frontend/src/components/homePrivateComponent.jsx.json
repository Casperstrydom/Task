{
    "sourceFile": "frontend/src/components/homePrivateComponent.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1758780767843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758783664919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -681,22 +681,26 @@\n                 {/* PRIVACY TOGGLE IN PROFILE */}\r\n                 <div className=\"privacy-section\">\r\n                   <h4>PRIVACY SETTINGS</h4>\r\n                   <div className=\"privacy-toggle\">\r\n-                    <span>Private Mode:</span>\r\n-                    <label className=\"toggle-switch\">\r\n+                    <span className=\"toggle-label\">Private Mode:</span>\r\n+                    <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                       <input\r\n                         type=\"checkbox\"\r\n+                        className=\"sr-only peer\"\r\n                         checked={currentUser.isPrivate}\r\n                         onChange={togglePrivacy}\r\n                       />\r\n-                      <span className=\"toggle-slider\"></span>\r\n+                      <div className=\"group peer ring-0 bg-rose-400 rounded-full outline-none duration-300 after:duration-300 w-24 h-12 shadow-md peer-checked:bg-emerald-500 peer-focus:outline-none after:content-[''] after:rounded-full after:absolute after:bg-gray-50 after:outline-none after:h-10 after:w-10 after:top-1 after:left-1 after:flex after:justify-center after:items-center peer-checked:after:translate-x-12 peer-hover:after:scale-95\">\r\n+                        <svg className=\"absolute top-1 left-12 stroke-gray-900 w-10 h-10\" height=\"100\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 100 100\" width=\"100\" x=\"0\" xmlns=\"http://www.w3.org/2000/svg\" y=\"0\">\r\n+                          <path className=\"svg-fill-primary\" d=\"M50,18A19.9,19.9,0,0,0,30,38v8a8,8,0,0,0-8,8V74a8,8,0,0,0,8,8H70a8,8,0,0,0,8-8V54a8,8,0,0,0-8-8H38V38a12,12,0,0,1,23.6-3,4,4,0,1,0,7.8-2A20.1,20.1,0,0,0,50,18Z\"></path>\r\n+                        </svg>\r\n+                        <svg className=\"absolute top-1 left-1 stroke-gray-900 w-10 h-10\" height=\"100\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 100 100\" width=\"100\" x=\"0\" xmlns=\"http://www.w3.org/2000/svg\" y=\"0\">\r\n+                          <path d=\"M30,46V38a20,20,0,0,1,40,0v8a8,8,0,0,1,8,8V74a8,8,0,0,1-8,8H30a8,8,0,0,1-8-8V54A8,8,0,0,1,30,46Zm32-8v8H38V38a12,12,0,0,1,24,0Z\" fill-rule=\"evenodd\"></path>\r\n+                        </svg>\r\n+                      </div>\r\n                     </label>\r\n-                    <span\r\n-                      className={`privacy-status ${\r\n-                        currentUser.isPrivate ? \"private\" : \"public\"\r\n-                      }`}\r\n-                    >\r\n+                    <span className={`privacy-status ${currentUser.isPrivate ? \"private\" : \"public\"}`}>\r\n                       {currentUser.isPrivate ? \"PRIVATE\" : \"PUBLIC\"}\r\n                     </span>\r\n                   </div>\r\n                   <p className=\"privacy-description\">\r\n@@ -769,15 +773,23 @@\n                     FRIENDS ({validFriends.length})\r\n                   </h3>\r\n                   {/* PRIVACY TOGGLE QUICK ACCESS */}\r\n                   <div className=\"privacy-toggle-quick\">\r\n-                    <label className=\"toggle-switch small\">\r\n+                    <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                       <input\r\n                         type=\"checkbox\"\r\n+                        className=\"sr-only peer\"\r\n                         checked={currentUser.isPrivate}\r\n                         onChange={togglePrivacy}\r\n                       />\r\n-                      <span className=\"toggle-slider\"></span>\r\n+                      <div className=\"group peer ring-0 bg-rose-400 rounded-full outline-none duration-300 after:duration-300 w-16 h-8 shadow-md peer-checked:bg-emerald-500 peer-focus:outline-none after:content-[''] after:rounded-full after:absolute after:bg-gray-50 after:outline-none after:h-6 after:w-6 after:top-1 after:left-1 after:flex after:justify-center after:items-center peer-checked:after:translate-x-8 peer-hover:after:scale-95\">\r\n+                        <svg className=\"absolute top-0.5 left-8 stroke-gray-900 w-7 h-7\" height=\"100\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 100 100\" width=\"100\" x=\"0\" xmlns=\"http://www.w3.org/2000/svg\" y=\"0\">\r\n+                          <path className=\"svg-fill-primary\" d=\"M50,18A19.9,19.9,0,0,0,30,38v8a8,8,0,0,0-8,8V74a8,8,0,0,0,8,8H70a8,8,0,0,0,8-8V54a8,8,0,0,0-8-8H38V38a12,12,0,0,1,23.6-3,4,4,0,1,0,7.8-2A20.1,20.1,0,0,0,50,18Z\"></path>\r\n+                        </svg>\r\n+                        <svg className=\"absolute top-0.5 left-1 stroke-gray-900 w-7 h-7\" height=\"100\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 100 100\" width=\"100\" x=\"0\" xmlns=\"http://www.w3.org/2000/svg\" y=\"0\">\r\n+                          <path d=\"M30,46V38a20,20,0,0,1,40,0v8a8,8,0,0,1,8,8V74a8,8,0,0,1-8,8H30a8,8,0,0,1-8-8V54A8,8,0,0,1,30,46Zm32-8v8H38V38a12,12,0,0,1,24,0Z\" fill-rule=\"evenodd\"></path>\r\n+                        </svg>\r\n+                      </div>\r\n                     </label>\r\n                     <span className=\"privacy-label\">\r\n                       {currentUser.isPrivate ? \"🔒 Private\" : \"🔓 Public\"}\r\n                     </span>\r\n@@ -978,5 +990,5 @@\n     </main>\r\n   );\r\n }\r\n \r\n-export default HomePrivateComponent;\r\n+export default HomePrivateComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758784528237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useState, useEffect, useCallback, useRef } from \"react\";\r\n import axios from \"axios\";\r\n-import \"../main/index.css\";\r\n+import \"../main/home.css\";\r\n import { format } from \"date-fns\";\r\n \r\n const apiBase = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\r\n \r\n"
                },
                {
                    "date": 1758785810520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     _id: null,\r\n     name: \"\",\r\n     email: \"\",\r\n     joined: \"\",\r\n-    isPrivate: false, // New privacy setting\r\n+    isPrivate: false,\r\n   });\r\n   const [incomingRequests, setIncomingRequests] = useState([]);\r\n   const [sentRequests, setSentRequests] = useState([]);\r\n   const [notification, setNotification] = useState(null);\r\n@@ -31,9 +31,9 @@\n   const [editingTask, setEditingTask] = useState(null);\r\n   const [editTaskTitle, setEditTaskTitle] = useState(\"\");\r\n   const [editDueDate, setEditDueDate] = useState(\"\");\r\n   const [editDueTime, setEditDueTime] = useState(\"12:00\");\r\n-  const [timeTracking, setTimeTracking] = useState({}); // { taskId: { startTime: Date, elapsed: number } }\r\n+  const [timeTracking, setTimeTracking] = useState({});\r\n \r\n   // ---------------- AUDIO ----------------\r\n   const bellAudio = useRef(new Audio(\"/bell.mp3\"));\r\n   const [audioUnlocked, setAudioUnlocked] = useState(false);\r\n@@ -214,9 +214,8 @@\n     axios\r\n       .delete(`${apiBase}/tasks/${id}`, headers)\r\n       .then(() => {\r\n         setTasks((prev) => prev.filter((t) => t._id !== id));\r\n-        // Stop time tracking if this task was being tracked\r\n         if (timeTracking[id]) {\r\n           setTimeTracking((prev) => {\r\n             const newTracking = { ...prev };\r\n             delete newTracking[id];\r\n@@ -677,59 +676,33 @@\n                     <span className=\"stat-label\">TASKS</span>\r\n                   </div>\r\n                 </div>\r\n \r\n-                {/* PRIVACY TOGGLE IN PROFILE */}\r\n+                {/* UPDATED PRIVACY TOGGLE WITH SLIDER */}\r\n                 <div className=\"privacy-section\">\r\n                   <h4>PRIVACY SETTINGS</h4>\r\n                   <div className=\"privacy-toggle\">\r\n-                    <span className=\"toggle-label\">Private Mode:</span>\r\n-                    <label className=\"relative inline-flex items-center cursor-pointer\">\r\n-                      <input\r\n-                        type=\"checkbox\"\r\n-                        className=\"sr-only peer\"\r\n-                        checked={currentUser.isPrivate}\r\n-                        onChange={togglePrivacy}\r\n-                      />\r\n-                      <div className=\"group peer ring-0 bg-rose-400 rounded-full outline-none duration-300 after:duration-300 w-24 h-12 shadow-md peer-checked:bg-emerald-500 peer-focus:outline-none after:content-[''] after:rounded-full after:absolute after:bg-gray-50 after:outline-none after:h-10 after:w-10 after:top-1 after:left-1 after:flex after:justify-center after:items-center peer-checked:after:translate-x-12 peer-hover:after:scale-95\">\r\n-                        <svg\r\n-                          className=\"absolute top-1 left-12 stroke-gray-900 w-10 h-10\"\r\n-                          height=\"100\"\r\n-                          preserveAspectRatio=\"xMidYMid meet\"\r\n-                          viewBox=\"0 0 100 100\"\r\n-                          width=\"100\"\r\n-                          x=\"0\"\r\n-                          xmlns=\"http://www.w3.org/2000/svg\"\r\n-                          y=\"0\"\r\n-                        >\r\n-                          <path\r\n-                            className=\"svg-fill-primary\"\r\n-                            d=\"M50,18A19.9,19.9,0,0,0,30,38v8a8,8,0,0,0-8,8V74a8,8,0,0,0,8,8H70a8,8,0,0,0,8-8V54a8,8,0,0,0-8-8H38V38a12,12,0,0,1,23.6-3,4,4,0,1,0,7.8-2A20.1,20.1,0,0,0,50,18Z\"\r\n-                          ></path>\r\n-                        </svg>\r\n-                        <svg\r\n-                          className=\"absolute top-1 left-1 stroke-gray-900 w-10 h-10\"\r\n-                          height=\"100\"\r\n-                          preserveAspectRatio=\"xMidYMid meet\"\r\n-                          viewBox=\"0 0 100 100\"\r\n-                          width=\"100\"\r\n-                          x=\"0\"\r\n-                          xmlns=\"http://www.w3.org/2000/svg\"\r\n-                          y=\"0\"\r\n-                        >\r\n-                          <path\r\n-                            d=\"M30,46V38a20,20,0,0,1,40,0v8a8,8,0,0,1,8,8V74a8,8,0,0,1-8,8H30a8,8,0,0,1-8-8V54A8,8,0,0,1,30,46Zm32-8v8H38V38a12,12,0,0,1,24,0Z\"\r\n-                            fill-rule=\"evenodd\"\r\n-                          ></path>\r\n-                        </svg>\r\n+                    <span className=\"toggle-label\">Profile Visibility:</span>\r\n+                    <div className=\"cyber-slider-container\">\r\n+                      <div\r\n+                        className={`cyber-slider ${currentUser.isPrivate ? 'private' : 'public'}`}\r\n+                        onClick={togglePrivacy}\r\n+                      >\r\n+                        <div className=\"slider-track\">\r\n+                          <div className=\"slider-thumb\"></div>\r\n+                        </div>\r\n+                        <div className=\"slider-labels\">\r\n+                          <span className={`label-public ${!currentUser.isPrivate ? 'active' : ''}`}>\r\n+                            🔓 PUBLIC\r\n+                          </span>\r\n+                          <span className={`label-private ${currentUser.isPrivate ? 'active' : ''}`}>\r\n+                            🔒 PRIVATE\r\n+                          </span>\r\n+                        </div>\r\n                       </div>\r\n-                    </label>\r\n-                    <span\r\n-                      className={`privacy-status ${\r\n-                        currentUser.isPrivate ? \"private\" : \"public\"\r\n-                      }`}\r\n-                    >\r\n-                      {currentUser.isPrivate ? \"PRIVATE\" : \"PUBLIC\"}\r\n+                    </div>\r\n+                    <span className={`privacy-status ${currentUser.isPrivate ? 'private' : 'public'}`}>\r\n+                      {currentUser.isPrivate ? \"PRIVATE MODE ACTIVE\" : \"PUBLIC MODE ACTIVE\"}\r\n                     </span>\r\n                   </div>\r\n                   <p className=\"privacy-description\">\r\n                     {currentUser.isPrivate\r\n@@ -799,53 +772,21 @@\n                 <div className=\"friends-header\">\r\n                   <h3 className=\"cyber-subtitle\">\r\n                     FRIENDS ({validFriends.length})\r\n                   </h3>\r\n-                  {/* PRIVACY TOGGLE QUICK ACCESS */}\r\n+                  {/* UPDATED QUICK PRIVACY TOGGLE */}\r\n                   <div className=\"privacy-toggle-quick\">\r\n-                    <label className=\"relative inline-flex items-center cursor-pointer\">\r\n-                      <input\r\n-                        type=\"checkbox\"\r\n-                        className=\"sr-only peer\"\r\n-                        checked={currentUser.isPrivate}\r\n-                        onChange={togglePrivacy}\r\n-                      />\r\n-                      <div className=\"group peer ring-0 bg-rose-400 rounded-full outline-none duration-300 after:duration-300 w-16 h-8 shadow-md peer-checked:bg-emerald-500 peer-focus:outline-none after:content-[''] after:rounded-full after:absolute after:bg-gray-50 after:outline-none after:h-6 after:w-6 after:top-1 after:left-1 after:flex after:justify-center after:items-center peer-checked:after:translate-x-8 peer-hover:after:scale-95\">\r\n-                        <svg\r\n-                          className=\"absolute top-0.5 left-8 stroke-gray-900 w-7 h-7\"\r\n-                          height=\"100\"\r\n-                          preserveAspectRatio=\"xMidYMid meet\"\r\n-                          viewBox=\"0 0 100 100\"\r\n-                          width=\"100\"\r\n-                          x=\"0\"\r\n-                          xmlns=\"http://www.w3.org/2000/svg\"\r\n-                          y=\"0\"\r\n-                        >\r\n-                          <path\r\n-                            className=\"svg-fill-primary\"\r\n-                            d=\"M50,18A19.9,19.9,0,0,0,30,38v8a8,8,0,0,0-8,8V74a8,8,0,0,0,8,8H70a8,8,0,0,0,8-8V54a8,8,0,0,0-8-8H38V38a12,12,0,0,1,23.6-3,4,4,0,1,0,7.8-2A20.1,20.1,0,0,0,50,18Z\"\r\n-                          ></path>\r\n-                        </svg>\r\n-                        <svg\r\n-                          className=\"absolute top-0.5 left-1 stroke-gray-900 w-7 h-7\"\r\n-                          height=\"100\"\r\n-                          preserveAspectRatio=\"xMidYMid meet\"\r\n-                          viewBox=\"0 0 100 100\"\r\n-                          width=\"100\"\r\n-                          x=\"0\"\r\n-                          xmlns=\"http://www.w3.org/2000/svg\"\r\n-                          y=\"0\"\r\n-                        >\r\n-                          <path\r\n-                            d=\"M30,46V38a20,20,0,0,1,40,0v8a8,8,0,0,1,8,8V74a8,8,0,0,1-8,8H30a8,8,0,0,1-8-8V54A8,8,0,0,1,30,46Zm32-8v8H38V38a12,12,0,0,1,24,0Z\"\r\n-                            fill-rule=\"evenodd\"\r\n-                          ></path>\r\n-                        </svg>\r\n+                    <div\r\n+                      className={`cyber-slider-quick ${currentUser.isPrivate ? 'private' : 'public'}`}\r\n+                      onClick={togglePrivacy}\r\n+                    >\r\n+                      <div className=\"slider-track-quick\">\r\n+                        <div className=\"slider-thumb-quick\"></div>\r\n                       </div>\r\n-                    </label>\r\n-                    <span className=\"privacy-label\">\r\n-                      {currentUser.isPrivate ? \"🔒 Private\" : \"🔓 Public\"}\r\n-                    </span>\r\n+                      <span className=\"privacy-label\">\r\n+                        {currentUser.isPrivate ? \"🔒 Private\" : \"🔓 Public\"}\r\n+                      </span>\r\n+                    </div>\r\n                   </div>\r\n                 </div>\r\n                 <div className=\"scroll-container\">\r\n                   <ul className=\"cyber-list\">\r\n@@ -1042,5 +983,5 @@\n     </main>\r\n   );\r\n }\r\n \r\n-export default HomePrivateComponent;\r\n+export default HomePrivateComponent;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758788941739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -681,8 +681,10 @@\n                 <div className=\"privacy-section\">\r\n                   <h4>PRIVACY SETTINGS</h4>\r\n                   <div className=\"privacy-toggle\">\r\n                     <span className=\"toggle-label\">Profile Visibility:</span>\r\n+\r\n+                    {/* Cyber styled slider toggle */}\r\n                     <div className=\"cyber-slider-container\">\r\n                       <div\r\n                         className={`cyber-slider ${\r\n                           currentUser.isPrivate ? \"private\" : \"public\"\r\n@@ -691,8 +693,10 @@\n                       >\r\n                         <div className=\"slider-track\">\r\n                           <div className=\"slider-thumb\"></div>\r\n                         </div>\r\n+\r\n+                        {/* Labels inside toggle */}\r\n                         <div className=\"slider-labels\">\r\n                           <span\r\n                             className={`label-public ${\r\n                               !currentUser.isPrivate ? \"active\" : \"\"\r\n@@ -709,8 +713,10 @@\n                           </span>\r\n                         </div>\r\n                       </div>\r\n                     </div>\r\n+\r\n+                    {/* Status text */}\r\n                     <span\r\n                       className={`privacy-status ${\r\n                         currentUser.isPrivate ? \"private\" : \"public\"\r\n                       }`}\r\n@@ -719,8 +725,10 @@\n                         ? \"PRIVATE MODE ACTIVE\"\r\n                         : \"PUBLIC MODE ACTIVE\"}\r\n                     </span>\r\n                   </div>\r\n+\r\n+                  {/* Description */}\r\n                   <p className=\"privacy-description\">\r\n                     {currentUser.isPrivate\r\n                       ? \"Your tasks are hidden from friends\"\r\n                       : \"Friends can see your tasks\"}\r\n"
                }
            ],
            "date": 1758780767842,
            "name": "Commit-0",
            "content": "import { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../main/index.css\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst apiBase = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\r\n\r\nfunction HomePrivateComponent() {\r\n  // ---------------- STATE ----------------\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [dueDate, setDueDate] = useState(\"\");\r\n  const [dueTime, setDueTime] = useState(\"12:00\");\r\n  const [friends, setFriends] = useState([]);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [showUserProfile, setShowUserProfile] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState({\r\n    _id: null,\r\n    name: \"\",\r\n    email: \"\",\r\n    joined: \"\",\r\n    isPrivate: false, // New privacy setting\r\n  });\r\n  const [incomingRequests, setIncomingRequests] = useState([]);\r\n  const [sentRequests, setSentRequests] = useState([]);\r\n  const [notification, setNotification] = useState(null);\r\n  const [showNotification, setShowNotification] = useState(false);\r\n  const [showDateTimePicker, setShowDateTimePicker] = useState(false);\r\n  const [customDate, setCustomDate] = useState(new Date());\r\n  const [customTime, setCustomTime] = useState(\"12:00\");\r\n  const [editingTask, setEditingTask] = useState(null);\r\n  const [editTaskTitle, setEditTaskTitle] = useState(\"\");\r\n  const [editDueDate, setEditDueDate] = useState(\"\");\r\n  const [editDueTime, setEditDueTime] = useState(\"12:00\");\r\n  const [timeTracking, setTimeTracking] = useState({}); // { taskId: { startTime: Date, elapsed: number } }\r\n\r\n  // ---------------- AUDIO ----------------\r\n  const bellAudio = useRef(new Audio(\"/bell.mp3\"));\r\n  const [audioUnlocked, setAudioUnlocked] = useState(false);\r\n\r\n  // ---------------- AUTH ----------------\r\n  const getAuthHeaders = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) return null;\r\n    return {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n  };\r\n\r\n  const handleTokenError = (err) => {\r\n    if (err.response?.status === 401 || err.response?.status === 403) {\r\n      alert(\"Session expired or invalid token. Please log in again.\");\r\n      localStorage.removeItem(\"token\");\r\n    } else {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // ---------------- AUDIO UNLOCK ----------------\r\n  const unlockAudio = () => {\r\n    bellAudio.current\r\n      .play()\r\n      .then(() => {\r\n        bellAudio.current.pause();\r\n        bellAudio.current.currentTime = 0;\r\n        setAudioUnlocked(true);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"click\", unlockAudio, { once: true });\r\n    return () => window.removeEventListener(\"click\", unlockAudio);\r\n  }, []);\r\n\r\n  // ---------------- FRIEND REQUESTS ----------------\r\n  const fetchFriendRequests = useCallback(() => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .get(`${apiBase}/friend-requests/incoming`, headers)\r\n      .then((res) =>\r\n        setIncomingRequests(Array.isArray(res.data) ? res.data : [])\r\n      )\r\n      .catch(handleTokenError);\r\n\r\n    axios\r\n      .get(`${apiBase}/friend-requests/sent`, headers)\r\n      .then((res) =>\r\n        setSentRequests(\r\n          Array.isArray(res.data) ? res.data.map((u) => u._id) : []\r\n        )\r\n      )\r\n      .catch(handleTokenError);\r\n  }, []);\r\n\r\n  // ---------------- FETCH INITIAL DATA ----------------\r\n  const fetchData = useCallback(() => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .get(`${apiBase}/tasks`, headers)\r\n      .then((res) =>\r\n        setTasks(Array.isArray(res.data.tasks) ? res.data.tasks : [])\r\n      )\r\n      .catch(handleTokenError);\r\n\r\n    axios\r\n      .get(`${apiBase}/friends`, headers)\r\n      .then((res) => setFriends(Array.isArray(res.data) ? res.data : []))\r\n      .catch(handleTokenError);\r\n\r\n    axios\r\n      .get(`${apiBase}/users`, headers)\r\n      .then((res) => setAllUsers(Array.isArray(res.data) ? res.data : []))\r\n      .catch(handleTokenError);\r\n\r\n    axios\r\n      .get(`${apiBase}/user/me`, headers)\r\n      .then((res) => setCurrentUser(res.data || { isPrivate: false }))\r\n      .catch(handleTokenError);\r\n\r\n    fetchFriendRequests();\r\n  }, [fetchFriendRequests]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    const interval = setInterval(fetchFriendRequests, 5000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchData, fetchFriendRequests]);\r\n\r\n  // ---------------- PRIVACY TOGGLE ----------------\r\n  const togglePrivacy = () => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    const newPrivacyState = !currentUser.isPrivate;\r\n\r\n    axios\r\n      .put(`${apiBase}/user/privacy`, { isPrivate: newPrivacyState }, headers)\r\n      .then(() => {\r\n        setCurrentUser((prev) => ({ ...prev, isPrivate: newPrivacyState }));\r\n        showTempNotification(\r\n          `Profile is now ${newPrivacyState ? \"private\" : \"public\"}`\r\n        );\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  // ---------------- DATE/TIME PICKER FUNCTIONS ----------------\r\n  const openDateTimePicker = () => {\r\n    setShowDateTimePicker(true);\r\n    setCustomDate(dueDate ? new Date(dueDate) : new Date());\r\n    setCustomTime(dueTime || \"12:00\");\r\n  };\r\n\r\n  const applyDateTime = () => {\r\n    const dateStr = customDate.toISOString().split(\"T\")[0];\r\n    setDueDate(dateStr);\r\n    setDueTime(customTime);\r\n    setShowDateTimePicker(false);\r\n  };\r\n\r\n  const quickSetDateTime = (minutesFromNow) => {\r\n    const now = new Date();\r\n    const newDate = new Date(now.getTime() + minutesFromNow * 60000);\r\n    setDueDate(newDate.toISOString().split(\"T\")[0]);\r\n    setDueTime(\r\n      `${String(newDate.getHours()).padStart(2, \"0\")}:${String(\r\n        newDate.getMinutes()\r\n      ).padStart(2, \"0\")}`\r\n    );\r\n    setShowDateTimePicker(false);\r\n  };\r\n\r\n  const clearDateTime = () => {\r\n    setDueDate(\"\");\r\n    setDueTime(\"12:00\");\r\n    setShowDateTimePicker(false);\r\n  };\r\n\r\n  // ---------------- TASK FUNCTIONS ----------------\r\n  const addTask = () => {\r\n    if (!newTask.trim()) return;\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    const taskData = {\r\n      title: newTask,\r\n      dueDate: dueDate && dueTime ? `${dueDate}T${dueTime}:00` : null,\r\n    };\r\n\r\n    axios\r\n      .post(`${apiBase}/tasks`, taskData, headers)\r\n      .then((res) => {\r\n        const newTaskItem = { ...res.data.task, alerted: false };\r\n        setTasks((prev) => [...prev, newTaskItem]);\r\n        setNewTask(\"\");\r\n        setDueDate(\"\");\r\n        setDueTime(\"12:00\");\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .delete(`${apiBase}/tasks/${id}`, headers)\r\n      .then(() => {\r\n        setTasks((prev) => prev.filter((t) => t._id !== id));\r\n        // Stop time tracking if this task was being tracked\r\n        if (timeTracking[id]) {\r\n          setTimeTracking((prev) => {\r\n            const newTracking = { ...prev };\r\n            delete newTracking[id];\r\n            return newTracking;\r\n          });\r\n        }\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  // ---------------- TASK EDITING ----------------\r\n  const startEditing = (task) => {\r\n    setEditingTask(task._id);\r\n    setEditTaskTitle(task.title);\r\n    if (task.dueDate) {\r\n      const date = new Date(task.dueDate);\r\n      setEditDueDate(date.toISOString().split(\"T\")[0]);\r\n      setEditDueTime(\r\n        `${String(date.getHours()).padStart(2, \"0\")}:${String(\r\n          date.getMinutes()\r\n        ).padStart(2, \"0\")}`\r\n      );\r\n    } else {\r\n      setEditDueDate(\"\");\r\n      setEditDueTime(\"12:00\");\r\n    }\r\n  };\r\n\r\n  const cancelEditing = () => {\r\n    setEditingTask(null);\r\n    setEditTaskTitle(\"\");\r\n    setEditDueDate(\"\");\r\n    setEditDueTime(\"\");\r\n  };\r\n\r\n  const saveTaskEdit = (taskId) => {\r\n    if (!editTaskTitle.trim()) return;\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    const taskData = {\r\n      title: editTaskTitle,\r\n      dueDate:\r\n        editDueDate && editDueTime ? `${editDueDate}T${editDueTime}:00` : null,\r\n    };\r\n\r\n    axios\r\n      .put(`${apiBase}/tasks/${taskId}`, taskData, headers)\r\n      .then((res) => {\r\n        setTasks((prev) =>\r\n          prev.map((task) =>\r\n            task._id === taskId ? { ...task, ...res.data.task } : task\r\n          )\r\n        );\r\n        setEditingTask(null);\r\n        setEditTaskTitle(\"\");\r\n        setEditDueDate(\"\");\r\n        setEditDueTime(\"\");\r\n        showTempNotification(\"Task updated successfully\");\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  // ---------------- TIME TRACKING ----------------\r\n  const startTimeTracking = (taskId) => {\r\n    setTimeTracking((prev) => ({\r\n      ...prev,\r\n      [taskId]: {\r\n        startTime: new Date(),\r\n        elapsed: prev[taskId]?.elapsed || 0,\r\n      },\r\n    }));\r\n    showTempNotification(\"Time tracking started\");\r\n  };\r\n\r\n  const stopTimeTracking = (taskId) => {\r\n    if (timeTracking[taskId]) {\r\n      const elapsed =\r\n        timeTracking[taskId].elapsed +\r\n        (new Date() - timeTracking[taskId].startTime);\r\n\r\n      setTimeTracking((prev) => ({\r\n        ...prev,\r\n        [taskId]: {\r\n          ...prev[taskId],\r\n          elapsed: elapsed,\r\n        },\r\n      }));\r\n      showTempNotification(\"Time tracking stopped\");\r\n    }\r\n  };\r\n\r\n  const resetTimeTracking = (taskId) => {\r\n    setTimeTracking((prev) => ({\r\n      ...prev,\r\n      [taskId]: {\r\n        startTime: prev[taskId]?.startTime || null,\r\n        elapsed: 0,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const getElapsedTime = (taskId) => {\r\n    if (!timeTracking[taskId]) return 0;\r\n\r\n    const { startTime, elapsed } = timeTracking[taskId];\r\n    if (startTime) {\r\n      return elapsed + (new Date() - startTime);\r\n    }\r\n    return elapsed;\r\n  };\r\n\r\n  const formatTime = (milliseconds) => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n    const seconds = totalSeconds % 60;\r\n\r\n    return `${hours.toString().padStart(2, \"0\")}:${minutes\r\n      .toString()\r\n      .padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\r\n  };\r\n\r\n  // ---------------- FRIEND FUNCTIONS ----------------\r\n  const sendFriendRequest = (userId, userName) => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .post(`${apiBase}/friend-requests`, { toUserId: userId }, headers)\r\n      .then(() => {\r\n        setSentRequests((prev) => [...prev, userId]);\r\n        showTempNotification(`Friend request sent to ${userName}`);\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  const acceptFriendRequest = (fromUserId, fromUser) => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .post(`${apiBase}/friend-requests/accept`, { fromUserId }, headers)\r\n      .then(() => {\r\n        setFriends((prev) => [...prev, fromUser]);\r\n        setIncomingRequests((prev) => prev.filter((r) => r._id !== fromUserId));\r\n        showTempNotification(`${fromUser.name} is now your friend!`);\r\n        fetchData();\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  const declineFriendRequest = (fromUserId) => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .post(`${apiBase}/friend-requests/decline`, { fromUserId }, headers)\r\n      .then(() =>\r\n        setIncomingRequests((prev) => prev.filter((r) => r._id !== fromUserId))\r\n      )\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  const removeFriend = (friendId, friendName) => {\r\n    const headers = getAuthHeaders();\r\n    if (!headers) return;\r\n\r\n    axios\r\n      .delete(`${apiBase}/friends/${friendId}`, headers)\r\n      .then(() => {\r\n        setFriends((prev) => {\r\n          const removedFriend = prev.find((f) => f._id === friendId);\r\n          if (removedFriend)\r\n            setAllUsers((prevUsers) => [...prevUsers, removedFriend]);\r\n          return prev.filter((f) => f._id !== friendId);\r\n        });\r\n        showTempNotification(`Removed ${friendName} from friends`);\r\n      })\r\n      .catch(handleTokenError);\r\n  };\r\n\r\n  // ---------------- UTIL ----------------\r\n  const showTempNotification = (message) => {\r\n    setNotification(message);\r\n    setShowNotification(true);\r\n    setTimeout(() => setShowNotification(false), 3000);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") addTask();\r\n  };\r\n\r\n  // ---------------- FILTERED USERS ----------------\r\n  const availableUsers = allUsers.filter(\r\n    (user) =>\r\n      user.name?.trim() &&\r\n      !friends.some((f) => f._id === user._id) &&\r\n      user._id !== currentUser._id &&\r\n      !sentRequests.includes(user._id)\r\n  );\r\n\r\n  const validFriends = friends.filter((friend) => friend.name?.trim());\r\n\r\n  // ---------------- FILTERED TASKS BASED ON PRIVACY ----------------\r\n  const filteredTasks = currentUser.isPrivate\r\n    ? tasks.filter((task) => task.owner === currentUser._id)\r\n    : tasks;\r\n\r\n  // ---------------- SORTED TASKS ----------------\r\n  const sortedTasks = [...filteredTasks].sort((a, b) => {\r\n    if (!a.dueDate) return 1;\r\n    if (!b.dueDate) return -1;\r\n    return new Date(a.dueDate) - new Date(b.dueDate);\r\n  });\r\n\r\n  // ---------------- TASK ALERTS & AUDIO ----------------\r\n  useEffect(() => {\r\n    if (!tasks.length) return;\r\n    const interval = setInterval(() => {\r\n      const now = new Date();\r\n      setTasks((prevTasks) =>\r\n        prevTasks.map((task) => {\r\n          if (task.dueDate && !task.alerted) {\r\n            const taskTime = new Date(task.dueDate);\r\n            if (now >= taskTime) {\r\n              if (audioUnlocked) bellAudio.current.play().catch(() => {});\r\n              showTempNotification(`Task \"${task.title}\" is due!`);\r\n              return { ...task, alerted: true };\r\n            }\r\n          }\r\n          return task;\r\n        })\r\n      );\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [tasks, audioUnlocked]);\r\n\r\n  // ---------------- RENDER ----------------\r\n  return (\r\n    <main className=\"futuristic-container\">\r\n      <div className=\"cyber-grid\"></div>\r\n      <div className=\"glowing-orbs\">\r\n        <div className=\"orb orb-1\"></div>\r\n        <div className=\"orb orb-2\"></div>\r\n        <div className=\"orb orb-3\"></div>\r\n      </div>\r\n\r\n      {showNotification && (\r\n        <div className=\"cyber-notification\">\r\n          <div className=\"cyber-notification-content\">\r\n            <span className=\"notification-icon\">🔔</span>\r\n            <span>{notification}</span>\r\n            <button\r\n              className=\"notification-close\"\r\n              onClick={() => setShowNotification(false)}\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showDateTimePicker && (\r\n        <div className=\"datetime-picker-overlay\">\r\n          <div className=\"datetime-picker-modal\">\r\n            <div className=\"datetime-picker-header\">\r\n              <h3>SET DATE & TIME</h3>\r\n              <button\r\n                className=\"close-picker-btn\"\r\n                onClick={() => setShowDateTimePicker(false)}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"datetime-picker-content\">\r\n              <div className=\"date-section\">\r\n                <h4>DATE</h4>\r\n                <div className=\"calendar-container\">\r\n                  <div className=\"calendar-nav\">\r\n                    <button\r\n                      onClick={() =>\r\n                        setCustomDate(\r\n                          new Date(\r\n                            customDate.getFullYear(),\r\n                            customDate.getMonth() - 1,\r\n                            1\r\n                          )\r\n                        )\r\n                      }\r\n                      className=\"nav-btn\"\r\n                    >\r\n                      ◀\r\n                    </button>\r\n                    <span className=\"current-month\">\r\n                      {customDate.toLocaleString(\"default\", {\r\n                        month: \"long\",\r\n                        year: \"numeric\",\r\n                      })}\r\n                    </span>\r\n                    <button\r\n                      onClick={() =>\r\n                        setCustomDate(\r\n                          new Date(\r\n                            customDate.getFullYear(),\r\n                            customDate.getMonth() + 1,\r\n                            1\r\n                          )\r\n                        )\r\n                      }\r\n                      className=\"nav-btn\"\r\n                    >\r\n                      ▶\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"calendar-grid\">\r\n                    {[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"].map((day, i) => (\r\n                      <div key={`${day}-${i}`} className=\"calendar-day-header\">\r\n                        {day}\r\n                      </div>\r\n                    ))}\r\n\r\n                    {Array.from(\r\n                      {\r\n                        length: new Date(\r\n                          customDate.getFullYear(),\r\n                          customDate.getMonth() + 1,\r\n                          0\r\n                        ).getDate(),\r\n                      },\r\n                      (_, i) => {\r\n                        const day = i + 1;\r\n                        const date = new Date(\r\n                          customDate.getFullYear(),\r\n                          customDate.getMonth(),\r\n                          day\r\n                        );\r\n                        const isToday =\r\n                          date.toDateString() === new Date().toDateString();\r\n                        const isSelected =\r\n                          date.toDateString() === customDate.toDateString();\r\n\r\n                        return (\r\n                          <button\r\n                            key={day}\r\n                            className={`calendar-day ${\r\n                              isToday ? \"today\" : \"\"\r\n                            } ${isSelected ? \"selected\" : \"\"}`}\r\n                            onClick={() => setCustomDate(date)}\r\n                          >\r\n                            {day}\r\n                          </button>\r\n                        );\r\n                      }\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"time-section\">\r\n                <h4>TIME</h4>\r\n                <div className=\"time-input-container\">\r\n                  <input\r\n                    type=\"time\"\r\n                    value={customTime}\r\n                    onChange={(e) => setCustomTime(e.target.value)}\r\n                    className=\"cyber-time-input\"\r\n                  />\r\n                </div>\r\n                <div className=\"quick-time-buttons\">\r\n                  <button\r\n                    onClick={() => quickSetDateTime(30)}\r\n                    className=\"quick-time-btn\"\r\n                  >\r\n                    30 MIN\r\n                  </button>\r\n                  <button\r\n                    onClick={() => quickSetDateTime(60)}\r\n                    className=\"quick-time-btn\"\r\n                  >\r\n                    1 HOUR\r\n                  </button>\r\n                  <button\r\n                    onClick={() => quickSetDateTime(1440)}\r\n                    className=\"quick-time-btn\"\r\n                  >\r\n                    TOMORROW\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"datetime-picker-footer\">\r\n              <button onClick={clearDateTime} className=\"clear-datetime-btn\">\r\n                CLEAR\r\n              </button>\r\n              <button onClick={applyDateTime} className=\"apply-datetime-btn\">\r\n                APPLY\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"app-wrapper\">\r\n        {/* SIDEBAR */}\r\n        <aside className=\"cyber-sidebar\">\r\n          <div className=\"sidebar-header\">\r\n            <h2 className=\"neon-text\">CONNECTIONS</h2>\r\n            <button\r\n              className=\"user-profile-button\"\r\n              onClick={() => setShowUserProfile(true)}\r\n              title=\"View Profile\"\r\n            >\r\n              <div className=\"user-avatar\">\r\n                <span className=\"avatar-icon\">👤</span>\r\n                {incomingRequests.length > 0 && (\r\n                  <span className=\"notification-badge\">\r\n                    {incomingRequests.length}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </button>\r\n          </div>\r\n\r\n          {showUserProfile ? (\r\n            <div className=\"user-profile-view\">\r\n              <div className=\"profile-header\">\r\n                <button\r\n                  className=\"back-button\"\r\n                  onClick={() => setShowUserProfile(false)}\r\n                >\r\n                  ← BACK\r\n                </button>\r\n              </div>\r\n              <div className=\"profile-content\">\r\n                <div className=\"profile-avatar-large\">\r\n                  <span className=\"avatar-icon-large\">👤</span>\r\n                </div>\r\n                <div className=\"profile-details\">\r\n                  <h3 className=\"profile-name\">{currentUser.name}</h3>\r\n                  <p className=\"profile-email\">{currentUser.email}</p>\r\n                  <p className=\"profile-joined\">\r\n                    Member since:{\" \"}\r\n                    {currentUser.joined\r\n                      ? new Date(currentUser.joined).toLocaleDateString()\r\n                      : \"Unknown\"}\r\n                  </p>\r\n                </div>\r\n                <div className=\"profile-stats\">\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-number\">{validFriends.length}</span>\r\n                    <span className=\"stat-label\">FRIENDS</span>\r\n                  </div>\r\n                  <div className=\"stat-item\">\r\n                    <span className=\"stat-number\">{tasks.length}</span>\r\n                    <span className=\"stat-label\">TASKS</span>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* PRIVACY TOGGLE IN PROFILE */}\r\n                <div className=\"privacy-section\">\r\n                  <h4>PRIVACY SETTINGS</h4>\r\n                  <div className=\"privacy-toggle\">\r\n                    <span>Private Mode:</span>\r\n                    <label className=\"toggle-switch\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={currentUser.isPrivate}\r\n                        onChange={togglePrivacy}\r\n                      />\r\n                      <span className=\"toggle-slider\"></span>\r\n                    </label>\r\n                    <span\r\n                      className={`privacy-status ${\r\n                        currentUser.isPrivate ? \"private\" : \"public\"\r\n                      }`}\r\n                    >\r\n                      {currentUser.isPrivate ? \"PRIVATE\" : \"PUBLIC\"}\r\n                    </span>\r\n                  </div>\r\n                  <p className=\"privacy-description\">\r\n                    {currentUser.isPrivate\r\n                      ? \"Your tasks are hidden from friends\"\r\n                      : \"Friends can see your tasks\"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {incomingRequests.length > 0 && (\r\n                <div className=\"cyber-list-section\">\r\n                  <h3 className=\"cyber-subtitle\">FRIEND REQUESTS</h3>\r\n                  <div className=\"scroll-container\">\r\n                    <ul className=\"cyber-list\">\r\n                      {incomingRequests.map((req) => (\r\n                        <li\r\n                          key={req._id}\r\n                          className=\"cyber-list-item request-item\"\r\n                        >\r\n                          <span>{req.name}</span>\r\n                          <div className=\"request-actions\">\r\n                            <button\r\n                              onClick={() => acceptFriendRequest(req._id, req)}\r\n                              className=\"accept-friend-btn\"\r\n                            >\r\n                              ✔\r\n                            </button>\r\n                            <button\r\n                              onClick={() => declineFriendRequest(req._id)}\r\n                              className=\"decline-friend-btn\"\r\n                            >\r\n                              ✖\r\n                            </button>\r\n                          </div>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"cyber-list-section\">\r\n                <h3 className=\"cyber-subtitle\">USERS</h3>\r\n                <div className=\"scroll-container\">\r\n                  <ul className=\"cyber-list\">\r\n                    {availableUsers.map((user) => (\r\n                      <li key={user._id} className=\"cyber-list-item\">\r\n                        <span>{user.name}</span>\r\n                        <button\r\n                          onClick={() => sendFriendRequest(user._id, user.name)}\r\n                          className=\"add-friend-btn\"\r\n                          disabled={sentRequests.includes(user._id)}\r\n                        >\r\n                          {sentRequests.includes(user._id)\r\n                            ? \"⏳\"\r\n                            : \"Add Friend\"}\r\n                        </button>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"cyber-list-section\">\r\n                <div className=\"friends-header\">\r\n                  <h3 className=\"cyber-subtitle\">\r\n                    FRIENDS ({validFriends.length})\r\n                  </h3>\r\n                  {/* PRIVACY TOGGLE QUICK ACCESS */}\r\n                  <div className=\"privacy-toggle-quick\">\r\n                    <label className=\"toggle-switch small\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={currentUser.isPrivate}\r\n                        onChange={togglePrivacy}\r\n                      />\r\n                      <span className=\"toggle-slider\"></span>\r\n                    </label>\r\n                    <span className=\"privacy-label\">\r\n                      {currentUser.isPrivate ? \"🔒 Private\" : \"🔓 Public\"}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"scroll-container\">\r\n                  <ul className=\"cyber-list\">\r\n                    {validFriends.map((friend) => (\r\n                      <li key={friend._id} className=\"cyber-list-item\">\r\n                        <span>{friend.name}</span>\r\n                        <button\r\n                          onClick={() => removeFriend(friend._id, friend.name)}\r\n                          className=\"remove-friend-btn\"\r\n                        >\r\n                          Remove\r\n                        </button>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </aside>\r\n\r\n        {/* MAIN TASK SECTION */}\r\n        <section className=\"cyber-main\">\r\n          <div className=\"main-header\">\r\n            <h1 className=\"cyber-title\">\r\n              <span className=\"cyber-title-text\">NEO TASK</span>\r\n              <span className=\"cyber-title-cursor pulse\">_</span>\r\n            </h1>\r\n            <div className=\"privacy-indicator\">\r\n              <span\r\n                className={`privacy-badge ${\r\n                  currentUser.isPrivate ? \"private\" : \"public\"\r\n                }`}\r\n              >\r\n                {currentUser.isPrivate ? \"🔒 PRIVATE MODE\" : \"🔓 PUBLIC MODE\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"cyber-input-section\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"ENTER NEW TASK...\"\r\n              className=\"cyber-input\"\r\n              value={newTask}\r\n              onChange={(e) => setNewTask(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n\r\n            <div className=\"datetime-input-container\">\r\n              <button\r\n                onClick={openDateTimePicker}\r\n                className=\"datetime-trigger-btn\"\r\n              >\r\n                ⏰{\" \"}\r\n                {dueDate\r\n                  ? format(new Date(`${dueDate}T${dueTime}`), \"MM/dd/yy HH:mm\")\r\n                  : \"SET TIME\"}\r\n              </button>\r\n            </div>\r\n\r\n            <button onClick={addTask} className=\"cyber-add-btn\">\r\n              ADD\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"cyber-tasks-container scroll-container\">\r\n            {sortedTasks.length > 0 ? (\r\n              <ul className=\"cyber-task-list\">\r\n                {sortedTasks.map((task) => (\r\n                  <li key={task._id} className=\"cyber-task-item\">\r\n                    {editingTask === task._id ? (\r\n                      <div className=\"task-edit-mode\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={editTaskTitle}\r\n                          onChange={(e) => setEditTaskTitle(e.target.value)}\r\n                          className=\"edit-task-input\"\r\n                          onKeyPress={(e) =>\r\n                            e.key === \"Enter\" && saveTaskEdit(task._id)\r\n                          }\r\n                        />\r\n                        <div className=\"edit-controls\">\r\n                          <button\r\n                            onClick={() => saveTaskEdit(task._id)}\r\n                            className=\"save-edit-btn\"\r\n                          >\r\n                            💾\r\n                          </button>\r\n                          <button\r\n                            onClick={cancelEditing}\r\n                            className=\"cancel-edit-btn\"\r\n                          >\r\n                            ✖\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <>\r\n                        <div className=\"task-content\">\r\n                          <span>\r\n                            {task.owner === currentUser._id ? \"\" : \"👥 \"}{\" \"}\r\n                            {task.title}\r\n                          </span>\r\n                          {task.dueDate && (\r\n                            <span className=\"task-date\">\r\n                              ⏰{\" \"}\r\n                              {format(\r\n                                new Date(task.dueDate),\r\n                                \"MM/dd/yyyy, hh:mm a\"\r\n                              )}\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n\r\n                        {/* TIME TRACKING DISPLAY */}\r\n                        {timeTracking[task._id] && (\r\n                          <div className=\"time-tracking-display\">\r\n                            <span className=\"tracked-time\">\r\n                              ⏱️ {formatTime(getElapsedTime(task._id))}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n\r\n                        <div className=\"task-actions\">\r\n                          {/* TIME TRACKING BUTTONS */}\r\n                          {task.owner === currentUser._id && (\r\n                            <div className=\"time-tracking-buttons\">\r\n                              {timeTracking[task._id]?.startTime ? (\r\n                                <button\r\n                                  onClick={() => stopTimeTracking(task._id)}\r\n                                  className=\"stop-time-btn\"\r\n                                  title=\"Stop tracking\"\r\n                                >\r\n                                  ⏹️\r\n                                </button>\r\n                              ) : (\r\n                                <button\r\n                                  onClick={() => startTimeTracking(task._id)}\r\n                                  className=\"start-time-btn\"\r\n                                  title=\"Start time tracking\"\r\n                                >\r\n                                  ⏱️\r\n                                </button>\r\n                              )}\r\n                              {timeTracking[task._id] && (\r\n                                <button\r\n                                  onClick={() => resetTimeTracking(task._id)}\r\n                                  className=\"reset-time-btn\"\r\n                                  title=\"Reset timer\"\r\n                                >\r\n                                  🔄\r\n                                </button>\r\n                              )}\r\n                            </div>\r\n                          )}\r\n\r\n                          {/* EDIT BUTTON */}\r\n                          {task.owner === currentUser._id && (\r\n                            <button\r\n                              onClick={() => startEditing(task)}\r\n                              className=\"edit-task-btn\"\r\n                              title=\"Edit task\"\r\n                            >\r\n                              ✏️\r\n                            </button>\r\n                          )}\r\n\r\n                          {/* DELETE BUTTON */}\r\n                          {task.owner === currentUser._id && (\r\n                            <button\r\n                              onClick={() => deleteTask(task._id)}\r\n                              className=\"cyber-delete-btn\"\r\n                            >\r\n                              ✖\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p className=\"no-tasks-message\">\r\n                {currentUser.isPrivate\r\n                  ? \"No private tasks yet\"\r\n                  : \"No tasks yet\"}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default HomePrivateComponent;\r\n"
        }
    ]
}