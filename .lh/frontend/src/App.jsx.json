{
    "sourceFile": "frontend/src/App.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1757669484648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757669764870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n // src/main/App.jsx\r\n import { useEffect } from \"react\";\r\n import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n import axios from \"axios\";\r\n-import Home from \"./Home.jsx\";\r\n-import Login from \"./Login.jsx\";\r\n-import Register from \"./Register.jsx\";\r\n+import Home from \"./main/Home.jsx\"\r\n+import Login from \"./main/Login.jsx\";\r\n+import Register from \"./main/Register.jsx\";\r\n \r\n // Base URL for backend API\r\n const apiBase = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\r\n \r\n"
                },
                {
                    "date": 1757672757536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,14 @@\n export default function App() {\r\n   useEffect(() => {\r\n     // Register service worker\r\n     if (\"serviceWorker\" in navigator) {\r\n-      navigator.serviceWorker\r\n-        .register(\"/sw.js\")\r\n-        .then(() => console.log(\"✅ Service Worker registered\"))\r\n-        .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n+      window.addEventListener(\"load\", () => {\r\n+        navigator.serviceWorker\r\n+          .register(\"/sw.js\")\r\n+          .then(() => console.log(\"✅ Service Worker registered\"))\r\n+          .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n+      });\r\n     }\r\n \r\n     // Subscribe user for push notifications\r\n     const subscribeUser = async () => {\r\n"
                },
                {
                    "date": 1757674378155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// src/main/App.jsx\r\n import { useEffect } from \"react\";\r\n import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n import axios from \"axios\";\r\n import Home from \"./main/Home.jsx\";\r\n@@ -12,23 +11,30 @@\n export default function App() {\r\n   useEffect(() => {\r\n     // Register service worker\r\n     if (\"serviceWorker\" in navigator) {\r\n-      window.addEventListener(\"load\", () => {\r\n-        navigator.serviceWorker\r\n-          .register(\"/sw.js\")\r\n-          .then(() => console.log(\"✅ Service Worker registered\"))\r\n-          .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n-      });\r\n+      navigator.serviceWorker\r\n+        .register(\"/sw.js\")\r\n+        .then(() => console.log(\"✅ Service Worker registered\"))\r\n+        .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n     }\r\n \r\n     // Subscribe user for push notifications\r\n     const subscribeUser = async () => {\r\n       if (!(\"serviceWorker\" in navigator) || !(\"PushManager\" in window)) return;\r\n \r\n       try {\r\n+        // Request notification permission first\r\n+        const permission = await Notification.requestPermission();\r\n+        if (permission !== \"granted\") {\r\n+          console.warn(\"⚠️ Push notifications permission denied\");\r\n+          return;\r\n+        }\r\n+\r\n+        // Wait until service worker is ready\r\n         const registration = await navigator.serviceWorker.ready;\r\n \r\n+        // Subscribe user\r\n         const subscription = await registration.pushManager.subscribe({\r\n           userVisibleOnly: true,\r\n           applicationServerKey: urlBase64ToUint8Array(\r\n             import.meta.env.VITE_VAPID_PUBLIC_KEY\r\n"
                },
                {
                    "date": 1757920257402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,74 @@\n-import { useEffect } from \"react\";\r\n-import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n+import { useEffect, useState } from \"react\";\r\n+import { BrowserRouter, Routes, Route, useNavigate } from \"react-router-dom\";\r\n import axios from \"axios\";\r\n import Home from \"./main/Home.jsx\";\r\n import Login from \"./main/Login.jsx\";\r\n import Register from \"./main/Register.jsx\";\r\n \r\n-// Base URL for backend API\r\n const apiBase = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\r\n \r\n export default function App() {\r\n-  useEffect(() => {\r\n-    // Register service worker\r\n-    if (\"serviceWorker\" in navigator) {\r\n-      navigator.serviceWorker\r\n-        .register(\"/sw.js\")\r\n-        .then(() => console.log(\"✅ Service Worker registered\"))\r\n-        .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n-    }\r\n+  const [currentUser, setCurrentUser] = useState(null);\r\n \r\n-    // Subscribe user for push notifications\r\n-    const subscribeUser = async () => {\r\n-      if (!(\"serviceWorker\" in navigator) || !(\"PushManager\" in window)) return;\r\n-\r\n-      try {\r\n-        // Request notification permission first\r\n-        const permission = await Notification.requestPermission();\r\n-        if (permission !== \"granted\") {\r\n-          console.warn(\"⚠️ Push notifications permission denied\");\r\n-          return;\r\n-        }\r\n-\r\n-        // Wait until service worker is ready\r\n-        const registration = await navigator.serviceWorker.ready;\r\n-\r\n-        // Subscribe user\r\n-        const subscription = await registration.pushManager.subscribe({\r\n-          userVisibleOnly: true,\r\n-          applicationServerKey: urlBase64ToUint8Array(\r\n-            import.meta.env.VITE_VAPID_PUBLIC_KEY\r\n-          ),\r\n-        });\r\n-\r\n-        // Send subscription to backend\r\n-        await axios.post(`${apiBase}/subscribe`, subscription);\r\n-        console.log(\"✅ Subscribed for push notifications\");\r\n-      } catch (err) {\r\n-        console.error(\"❌ Push subscription failed:\", err);\r\n-      }\r\n-    };\r\n-\r\n-    subscribeUser();\r\n-  }, []);\r\n-\r\n-  // Helper function to convert VAPID key\r\n-  function urlBase64ToUint8Array(base64String) {\r\n-    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n-    const base64 = (base64String + padding)\r\n-      .replace(/-/g, \"+\")\r\n-      .replace(/_/g, \"/\");\r\n-    const rawData = window.atob(base64);\r\n-    return Uint8Array.from([...rawData].map((c) => c.charCodeAt(0)));\r\n-  }\r\n-\r\n   return (\r\n     <BrowserRouter>\r\n       <Routes>\r\n-        <Route path=\"/home\" element={<Home />} />\r\n-        <Route path=\"/login\" element={<Login />} />\r\n-        <Route path=\"/register\" element={<Register />} />\r\n+        <Route\r\n+          path=\"/home\"\r\n+          element={<Home currentUser={currentUser} />}\r\n+        />\r\n+        <Route\r\n+          path=\"/login\"\r\n+          element={\r\n+            <LoginWrapper\r\n+              setCurrentUser={setCurrentUser}\r\n+            />\r\n+          }\r\n+        />\r\n+        <Route\r\n+          path=\"/register\"\r\n+          element={\r\n+            <RegisterWrapper\r\n+              setCurrentUser={setCurrentUser}\r\n+            />\r\n+          }\r\n+        />\r\n       </Routes>\r\n     </BrowserRouter>\r\n   );\r\n }\r\n+\r\n+// Wrap Login with navigation and setCurrentUser\r\n+function LoginWrapper({ setCurrentUser }) {\r\n+  const navigate = useNavigate();\r\n+\r\n+  const handleLogin = (loginData) => {\r\n+    // For now, just mock a logged-in user\r\n+    const loggedUser = {\r\n+      name: \"Logged User\",\r\n+      email: loginData.email,\r\n+      joined: new Date().toISOString(),\r\n+    };\r\n+    setCurrentUser(loggedUser);\r\n+    navigate(\"/home\"); // redirect to home after login\r\n+  };\r\n+\r\n+  return <Login onLogin={handleLogin} switchToRegister={() => navigate(\"/register\")} />;\r\n+}\r\n+\r\n+// Wrap Register with navigation and setCurrentUser\r\n+function RegisterWrapper({ setCurrentUser }) {\r\n+  const navigate = useNavigate();\r\n+\r\n+  const handleRegister = (formData) => {\r\n+    const newUser = {\r\n+      name: formData.name,\r\n+      email: formData.email,\r\n+      joined: new Date().toISOString(),\r\n+    };\r\n+    setCurrentUser(newUser);\r\n+    navigate(\"/home\"); // redirect to home after register\r\n+  };\r\n+\r\n+  return <Register onRegister={handleRegister} switchToLogin={() => navigate(\"/login\")} />;\r\n+}\r\n"
                }
            ],
            "date": 1757669484648,
            "name": "Commit-0",
            "content": "// src/main/App.jsx\r\nimport { useEffect } from \"react\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Home from \"./Home.jsx\";\r\nimport Login from \"./Login.jsx\";\r\nimport Register from \"./Register.jsx\";\r\n\r\n// Base URL for backend API\r\nconst apiBase = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\r\n\r\nexport default function App() {\r\n  useEffect(() => {\r\n    // Register service worker\r\n    if (\"serviceWorker\" in navigator) {\r\n      navigator.serviceWorker\r\n        .register(\"/sw.js\")\r\n        .then(() => console.log(\"✅ Service Worker registered\"))\r\n        .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n    }\r\n\r\n    // Subscribe user for push notifications\r\n    const subscribeUser = async () => {\r\n      if (!(\"serviceWorker\" in navigator) || !(\"PushManager\" in window)) return;\r\n\r\n      try {\r\n        const registration = await navigator.serviceWorker.ready;\r\n\r\n        const subscription = await registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          applicationServerKey: urlBase64ToUint8Array(\r\n            import.meta.env.VITE_VAPID_PUBLIC_KEY\r\n          ),\r\n        });\r\n\r\n        // Send subscription to backend\r\n        await axios.post(`${apiBase}/subscribe`, subscription);\r\n        console.log(\"✅ Subscribed for push notifications\");\r\n      } catch (err) {\r\n        console.error(\"❌ Push subscription failed:\", err);\r\n      }\r\n    };\r\n\r\n    subscribeUser();\r\n  }, []);\r\n\r\n  // Helper function to convert VAPID key\r\n  function urlBase64ToUint8Array(base64String) {\r\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, \"+\")\r\n      .replace(/_/g, \"/\");\r\n    const rawData = window.atob(base64);\r\n    return Uint8Array.from([...rawData].map((c) => c.charCodeAt(0)));\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/home\" element={<Home />} />\r\n        <Route path=\"/login\" element={<Login />} />\r\n        <Route path=\"/register\" element={<Register />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n"
        }
    ]
}