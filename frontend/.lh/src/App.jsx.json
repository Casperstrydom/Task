{
    "sourceFile": "src/App.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758185271430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758185271430,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Routes, Route, Navigate, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Home from \"./main/Home.jsx\";\r\nimport Login from \"./main/Login.jsx\";\r\nimport Register from \"./main/Register.jsx\";\r\n\r\nconst apiBase = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\r\n\r\nfunction App() {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (\"serviceWorker\" in navigator) {\r\n      navigator.serviceWorker\r\n        .register(\"/sw.js\")\r\n        .then(() => console.log(\"✅ Service Worker registered\"))\r\n        .catch((err) => console.error(\"❌ SW registration failed:\", err));\r\n    }\r\n\r\n    const subscribeUser = async () => {\r\n      if (!(\"serviceWorker\" in navigator) || !(\"PushManager\" in window)) return;\r\n\r\n      try {\r\n        const permission = await Notification.requestPermission();\r\n        if (permission !== \"granted\") return;\r\n\r\n        const registration = await navigator.serviceWorker.ready;\r\n        const subscription = await registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          applicationServerKey: urlBase64ToUint8Array(import.meta.env.VITE_VAPID_PUBLIC_KEY),\r\n        });\r\n\r\n        await axios.post(`${apiBase}/subscribe`, subscription);\r\n        console.log(\"✅ Subscribed for push notifications\");\r\n      } catch (err) {\r\n        console.error(\"❌ Push subscription failed:\", err);\r\n      }\r\n    };\r\n\r\n    subscribeUser();\r\n  }, []);\r\n\r\n  function urlBase64ToUint8Array(base64String) {\r\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n    const rawData = window.atob(base64);\r\n    return Uint8Array.from([...rawData].map((c) => c.charCodeAt(0)));\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        {/* Default route */}\r\n        <Route path=\"/\" element={<Navigate to=\"/login\" replace />} />\r\n\r\n        <Route path=\"/home\" element={<Home currentUser={currentUser} />} />\r\n        <Route path=\"/login\" element={<LoginWrapper setCurrentUser={setCurrentUser} />} />\r\n        <Route path=\"/register\" element={<RegisterWrapper setCurrentUser={setCurrentUser} />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nfunction LoginWrapper({ setCurrentUser }) {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (loginData) => {\r\n    const loggedUser = {\r\n      name: \"Logged User\",\r\n      email: loginData.email,\r\n      joined: new Date().toISOString(),\r\n    };\r\n    setCurrentUser(loggedUser);\r\n    navigate(\"/home\");\r\n  };\r\n\r\n  return <Login onLogin={handleLogin} switchToRegister={() => navigate(\"/register\")} />;\r\n}\r\n\r\nfunction RegisterWrapper({ setCurrentUser }) {\r\n  const navigate = useNavigate();\r\n\r\n  const handleRegister = (formData) => {\r\n    const newUser = {\r\n      name: formData.name,\r\n      email: formData.email,\r\n      joined: new Date().toISOString(),\r\n    };\r\n    setCurrentUser(newUser);\r\n    navigate(\"/home\");\r\n  };\r\n\r\n  return <Register onRegister={handleRegister} switchToLogin={() => navigate(\"/login\")} />;\r\n}\r\n\r\nexport default App;\r\n"
        }
    ]
}